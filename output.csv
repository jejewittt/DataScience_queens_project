,Title,Type,Assignee,reporter,Description,created,updated,status,Priority,Resolved,link,comments
0,ConvertBodyTo should reset message type like transform EIP does,Improvement,Claus Ibsen,Claus Ibsen,"

We should make convertBodyTo alike transform/setBody, as when you change the message body, then if any specialized message instances, then we should copy the message to a default message, and set the type converted body. This is how those other EIPs does it.
If you do a 

from file
  convertBodyTo String
  to file


Then the file producer may detect the GenericFileMessage, from the consumer. But the convert body to, should have converted the message into a default message.

",25/Apr/12 11:21,25/Apr/12 12:04,Resolved,Minor,25/Apr/12 12:04,https://issues.apache.org/jira/browse/CAMEL-5216,
1,camel-mail - Fallback to getInstance if getDefaultInstance fails on Session as it may do in some systems,Improvement,Claus Ibsen,Claus Ibsen,"

MailConfiguration calls Session.getDefaultInstance which may not be allowed on some system. In those situations you should invoke the getInstance instead.

",04/Jun/10 04:56,24/Apr/11 10:01,Closed,Major,open,https://issues.apache.org/jira/browse/CAMEL-2789,      Claus Ibsen added a comment  - 04/Jun/10 05:00   You will get this kind of exceptionjava.lang.SecurityException: Access to default session deniedWhich has also been debated a bit herehttp://fusesource.com/forums/message.jspa?messageID=5266          Claus Ibsen added a comment  - 04/Jun/10 05:00                    You will get this kind of exception    java.lang.SecurityException: Access to  default  session denied    Which has also been debated a bit here  http://fusesource.com/forums/message.jspa?messageID=5266                 $_$      Claus Ibsen added a comment  - 04/Jun/10 05:01   trunk: 951265.          Claus Ibsen added a comment  - 04/Jun/10 05:01                    trunk: 951265.                $_$      Claus Ibsen added a comment  - 24/Apr/11 10:01   Closing all resolved tickets from 2010 or older          Claus Ibsen added a comment  - 24/Apr/11 10:01                    Closing all resolved tickets from 2010 or older                
2,axiom 1.2.12 can't work with abdera 1.1.2,Bug,Freeman Yue Fang,Freeman Yue Fang,"

CAMEL-4192 upgrade to axiom 1.2.12, and we have camel-atom feature which use latest axiom 1.2.12 and abdera 1.1.2 together, however, actually abdera 1.1.2  need work with axiom 1.2.10.
In org.apache.abdera.parser.stax.util.FOMExtensionIterator(abdera code), it need use a field currentChild which inherit from org.apache.axiom.om.impl.traverse.OMAbstractIterator(axiom code),  but field currentChild was removed from axiom 1.2.12, so that we can see exception like
java.lang.NoSuchFieldError: currentChild
	at org.apache.abdera.parser.stax.util.FOMExtensionIterator.hasNext(FOMExtensionIterator.java:74)
	at org.apache.abdera.parser.stax.util.FOMList.buffer(FOMList.java:60)
	at org.apache.abdera.parser.stax.util.FOMList.size(FOMList.java:77)
As abdera 1.1.2 already the latest version so that I think we need rollback to axiom 1.2.10 utill next abdera version which can work with axiom 1.2.12
Btw I believe this is the reason that why CXF still use axiom 1.2.10.

",21/Mar/12 05:19,10/Jan/13 08:48,Resolved,Major,14/Dec/12 08:17,https://issues.apache.org/jira/browse/CAMEL-5109,"      Freeman Yue Fang added a comment  - 21/Mar/12 08:20   commit fixhttp://svn.apache.org/viewvc?rev=1303301&view=rev for trunkhttp://svn.apache.org/viewvc?rev=1303304&view=rev for 2.9.x branchhttp://svn.apache.org/viewvc?rev=1303306&view=rev for 2.8.x branch          Freeman Yue Fang added a comment  - 21/Mar/12 08:20                    commit fix  http://svn.apache.org/viewvc?rev=1303301&view=rev  for trunk  http://svn.apache.org/viewvc?rev=1303304&view=rev  for 2.9.x branch  http://svn.apache.org/viewvc?rev=1303306&view=rev  for 2.8.x branch                $_$      Benjamin Truitt added a comment  - 12/Dec/12 20:39   This appears to be broken again in Camel 2.10.2.  The change the re-introduced this issue was revision 1356481:http://svn.apache.org/viewvc/camel/trunk/parent/pom.xml?r1=1356480&r2=1356481&diff_format=h          Benjamin Truitt added a comment  - 12/Dec/12 20:39                    This appears to be broken again in Camel 2.10.2.  The change the re-introduced this issue was revision 1356481:  http://svn.apache.org/viewvc/camel/trunk/parent/pom.xml?r1=1356480&r2=1356481&diff_format=h                 $_$      Freeman Yue Fang added a comment  - 13/Dec/12 02:34   Hi,Thanks for pointing out this issue.Sent an alarm mail around to community.Freeman          Freeman Yue Fang added a comment  - 13/Dec/12 02:34                    Hi,  Thanks for pointing out this issue. Sent an alarm mail around to community.  Freeman                $_$      Freeman Yue Fang added a comment  - 13/Dec/12 11:10   reopen it as this issue get introduced again          Freeman Yue Fang added a comment  - 13/Dec/12 11:10                    reopen it as this issue get introduced again                "
3,camel-ganglia: add unit tests for packets sent to the wire,Improvement,Alex Dettinger,Daniel Pocock,"

Look for a way to capture the packets sent to the wire and develop unit tests to evaluate them.
In CAMEL-8342, Claus commented: ""camel-netty4 / camel-mina2 etc has some socket / udp tests"" - that might provide a useful example of how to implement this.

",16/Mar/15 10:04,07/Jun/18 20:27,Resolved,Minor,07/Jun/18 20:27,https://issues.apache.org/jira/browse/CAMEL-8494,      Alex Dettinger added a comment  - 07/Jun/18 20:27   Packets have been loosely asserted while augmenting the test coverage for camel-ganglia.          Alex Dettinger added a comment  - 07/Jun/18 20:27                    Packets have been loosely asserted while augmenting the test coverage for camel-ganglia.                
4,camel-jbang - Cannot build on JDK8,Task,Claus Ibsen,Claus Ibsen,"

INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:44 h
[INFO] Finished at: 2021-08-03T19:33:33Z
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0:jar (attach-javadocs) on project camel-jbang-main: MavenReportException: Error while generating Javadoc: 
[ERROR] Exit code: 1 - javadoc: error - No public or protected classes found to document.
[ERROR] 
[ERROR] Command line was: /usr/local/asfpackages/java/adoptopenjdk-hotspot-8u282-b08/jre/../bin/javadoc @options @packages
[ERROR] 
[ERROR] Refer to the generated Javadoc files in '/home/jenkins/jenkins-agent/workspace/Camel_Apache_Camel_main/dsl/camel-jbang/camel-jbang-main/target/apidocs' dir.
[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0:jar (attach-javadocs) on project camel-jbang-main: MavenReportException: Error while generating Javadoc: 
Exit code: 1 - javadoc: error - No public or protected classes found to document.
Command line was: /usr/local/asfpackages/java/adoptopenjdk-hotspot-8u282-b08/jre/../bin/javadoc @options @packages
Refer to the generated Javadoc files in '/home/jenkins/jenkins-agent/workspace/Camel_Apache_Camel_main/dsl/camel-jbang/camel-jbang-main/target/apidocs' dir.
https://ci-builds.apache.org/job/Camel/job/Apache%20Camel/job/main/249/console

",03/Aug/21 19:45,04/Aug/21 17:06,Resolved,Major,04/Aug/21 15:40,https://issues.apache.org/jira/browse/CAMEL-16842,"      Otavio Rodolfo Piske added a comment  - 04/Aug/21 17:06   Thanks, I missed this one!          Otavio Rodolfo Piske added a comment  - 04/Aug/21 17:06                    Thanks, I missed this one!                "
5,NATS consumer throws NullPointerException on connection failure,Bug,James Netherton,James Netherton,"

Something I observed in camel-quarkus, when the NATS integration test occasionally fails with connection errors, there's also NullPointerException thrown from the consumer doStop().


[INFO] Caused by: java.lang.NullPointerException
[INFO] 	at org.apache.camel.component.nats.NatsConsumer.doStop(NatsConsumer.java:71)
[INFO] 	at org.apache.camel.support.service.BaseService.stop(BaseService.java:156)
[INFO] 	at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:133)
[INFO] 	at org.apache.camel.support.service.ServiceHelper.stopAndShutdownService(ServiceHelper.java:198)
[INFO] 	at org.apache.camel.impl.engine.RouteService.stopChildService(RouteService.java:352)
[INFO] 	at org.apache.camel.impl.engine.RouteService.doStop(RouteService.java:240)
[INFO] 	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:86)



",09/Nov/20 09:52,09/Nov/20 10:33,Resolved,Major,09/Nov/20 10:33,https://issues.apache.org/jira/browse/CAMEL-15834,
6,AWS2 S3 Component unclosed stream issue with includeFolders property,Bug,Andrea Cosentino,Filipe Portes,"

When using Camel aws2-s3 component and the `includeFolders` option as false, some `ResponseInputStream` objects are left unclosed and are causing the aws sdk connection pool to get full.  
example of Route: 


from(""aws2-s3://{{aws.s3.sftpBucket}}?amazonS3Client=#amazonS3&delay=1000""
    + ""&includeFolders=false"")
    .to(""file:/tmp/?fileName=${header.CamelAwsS3Key}"")

this results in the exception appearing in the logs after some seconds: 


Caused by: [software.amazon.awssdk.core.exception.SdkClientException - Unable to execute HTTP request: Timeout waiting for connection from pool]software.amazon.awssdk.core.exception.SdkClientException: Unable to execute HTTP request: Timeout waiting for connection from pool
	at software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:98)
	at software.amazon.awssdk.core.exception.SdkClientException.create(SdkClientException.java:43)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.utils.RetryableStageHelper.setLastException(RetryableStageHelper.java:199)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:66)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:34)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:56)
	at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:36)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.executeWithTimer(ApiCallTimeoutTrackingStage.java:80)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:60)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:42)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:37)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:26)
	at software.amazon.awssdk.core.internal.http.AmazonSyncHttpClient$RequestExecutionBuilderImpl.execute(AmazonSyncHttpClient.java:189)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.invoke(BaseSyncClientHandler.java:121)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.doExecute(BaseSyncClientHandler.java:147)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:101)
	at software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45)
	at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:55)
	at software.amazon.awssdk.services.s3.DefaultS3Client.listObjects(DefaultS3Client.java:4792)
	at org.apache.camel.component.aws2.s3.AWS2S3Consumer.poll(AWS2S3Consumer.java:138)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:190)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:107)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.http.conn.ConnectionPoolTimeoutException: Timeout waiting for connection from pool
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.leaseConnection(PoolingHttpClientConnectionManager.java:316)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1.get(PoolingHttpClientConnectionManager.java:282)
	at jdk.internal.reflect.GeneratedMethodAccessor305.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at software.amazon.awssdk.http.apache.internal.conn.ClientConnectionRequestFactory$Handler.invoke(ClientConnectionRequestFactory.java:83)
	at com.sun.proxy.$Proxy137.get(Unknown Source)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:190)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at software.amazon.awssdk.http.apache.internal.impl.ApacheSdkHttpClient.execute(ApacheSdkHttpClient.java:72)
	at software.amazon.awssdk.http.apache.ApacheHttpClient.execute(ApacheHttpClient.java:232)
	at software.amazon.awssdk.http.apache.ApacheHttpClient.access$500(ApacheHttpClient.java:98)
	at software.amazon.awssdk.http.apache.ApacheHttpClient$1.call(ApacheHttpClient.java:213)


 
The issue doesn't repeat when the `includeFolders` is kept as true.

",13/Sep/20 18:02,14/Sep/20 05:58,Resolved,Major,14/Sep/20 05:58,https://issues.apache.org/jira/browse/CAMEL-15530,      Filipe Portes added a comment  - 13/Sep/20 18:23   PR:u00A0https://github.com/apache/camel/pull/4209          Filipe Portes added a comment  - 13/Sep/20 18:23                    PR:u00A0 https://github.com/apache/camel/pull/4209                 
7,Create Huawei-smn starter for Camel-spring-boot,Task,Andrea Cosentino,Andrea Cosentino,,01/Feb/21 09:15,01/Feb/21 09:45,Resolved,Major,01/Feb/21 09:45,https://issues.apache.org/jira/browse/CAMEL-16124,
8,camel-salesforce: EndpointConfiguration not taken into account by SubscriptionHelper,Bug,Zoran Regvart,Luca Burgazzoli,"

In SubscriptionHelper all the configuration options hare retrieved using component's configuration but that may be different from endpoint configuration, as example in SubscriptionHelper.createClient :

Map<String, Integer> replayIdMap = component.getConfig().getInitialReplayIdMap();
if (replayIdMap != null) {
        replayId = replayIdMap.get(channelName);
}
if (replayId == null) {
        replayId = component.getConfig().getDefaultReplayId();
}


The main issue is that the component uses the same configuration as the endpoint so one would expect to be able to set any option available in SalesforceEndpointConfig i.e. on the uri but that won't work:

  from(""salesforce:my-stream-1?defaultReplayId=-1"")
    .to(""..."")
  from(""salesforce:my-stream-2?defaultReplayId=-2"")
    .to(""..."")


It would be nice to remove ""global"" options from SalesforceEndpointConfig as they are misleading or always use the configuration from the endpoint. 

",18/Nov/16 11:01,23/Mar/17 12:13,Resolved,Major,23/Mar/17 12:13,https://issues.apache.org/jira/browse/CAMEL-10495,"      Claus Ibsen added a comment  - 22/Nov/16 09:22   Yeah it should be like other components where endpoint options override any component configured values.          Claus Ibsen added a comment  - 22/Nov/16 09:22                    Yeah it should be like other components where endpoint options override any component configured values.                $_$      Claus Ibsen added a comment  - 22/Nov/16 09:22   zregvart I wonder if you would take a look at this also, as you are deep in the salesforce code.          Claus Ibsen added a comment  - 22/Nov/16 09:22                     zregvart  I wonder if you would take a look at this also, as you are deep in the salesforce code.                $_$      Zoran Regvart added a comment  - 23/Mar/17 12:13   This was fixed in CAMEL-10849.          Zoran Regvart added a comment  - 23/Mar/17 12:13                    This was fixed in   CAMEL-10849  .                "
9,Make method asService protected in class CamelBlueprintTestSupport ,Wish,Willem Jiang,Stéphane Deraco,"

In camel-test-blueprint, Camel version 2.11.2 and 2.12.0 added the possibilty to add OSGi services at startup using the protected method addServicesOnStartup of CamelBlueprintTestSupport class.
In the Javadoc and in the wiki it says that we can use the method asService to register a service with a single property.
However, this method has no modifier. It is not protected, so we can not use it in our test classes (unless they belongs to the same package of CamelBlueprintTestSupport.

",24/Nov/13 14:04,16/Sep/14 11:59,Resolved,Minor,27/Nov/13 08:18,https://issues.apache.org/jira/browse/CAMEL-7006,"      Stu00E9phane Deraco added a comment  - 25/Nov/13 12:33   - edited   Hi,I created a pull-request : https://github.com/apache/camel/pull/61Stu00E9phane          Stu00E9phane Deraco added a comment  - 25/Nov/13 12:33   - edited                   Hi,  I created a pull-request :  https://github.com/apache/camel/pull/61   Stu00E9phane                "
10,camel-jbang - camel catalog other does not list kotlin-dsl,Improvement,Claus Ibsen,Claus Ibsen,,13/Dec/23 13:09,13/Dec/23 13:28,Resolved,Minor,13/Dec/23 13:28,https://issues.apache.org/jira/browse/CAMEL-20233,
11,RouteIdFactory - That can assign route ids using derived values from uris,New Feature,Claus Ibsen,Claus Ibsen,"

When using routes that uses direct/seda etc as route inputs, then you may want to use their name as the route id, eg
direct:foo   -> foo
seda:bar    -> bar
jms:orders -> orders
Instead of having route1, route2 as auto assigned names. 
There could be a NodeIdFactory that assign such names for route's. For example it can use the context-path of the route url as the name.

",27/Sep/16 06:57,01/Dec/16 11:48,Resolved,Minor,01/Dec/16 11:48,https://issues.apache.org/jira/browse/CAMEL-10344,"      ASF GitHub Bot added a comment  - 01/Nov/16 19:02   GitHub user tkopczynski opened a pull request: https://github.com/apache/camel/pull/1242 CAMEL-10344: RouteIdFactory - assigning route ids based on uris    This PR adds RouteIdFactory which can be used as a NodeIdFactory implementation in CamelContext as a different strategy for assigning route ids.    Currently, it works with direct and similar routes.    Unfortunately, I'm not sure on how to integrate this with assigning ids in rest routes. It feels like this should be somewhere in `RestDefinition.addRouteDefinition` but route id is assigned so early that RouteDefinition doesn't have enough information for creating the id from the path.    @davsclaus do you have any ideas/suggestions on this?You can merge this pull request into a Git repository by running:    $ git pull https://github.com/tkopczynski/camel camel-10344Alternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/1242.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #1242commit f0bc524b7546b398a4a4f804c63a7e0807d1b58aAuthor: Tomasz Kopczynski <tomek@kopczynski.net.pl>Date:   2016-11-01T18:49:06Z CAMEL-10344: RouteIdFactory - assigning route ids based on uris          ASF GitHub Bot added a comment  - 01/Nov/16 19:02                    GitHub user tkopczynski opened a pull request:       https://github.com/apache/camel/pull/1242         CAMEL-10344  : RouteIdFactory - assigning route ids based on uris      This PR adds RouteIdFactory which can be used as a NodeIdFactory implementation in CamelContext as a different strategy for assigning route ids.      Currently, it works with direct and similar routes.      Unfortunately, I'm not sure on how to integrate this with assigning ids in rest routes. It feels like this should be somewhere in `RestDefinition.addRouteDefinition` but route id is assigned so early that RouteDefinition doesn't have enough information for creating the id from the path.      @davsclaus do you have any ideas/suggestions on this?  You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/tkopczynski/camel  camel-10344  Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/1242.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #1242   commit f0bc524b7546b398a4a4f804c63a7e0807d1b58a Author: Tomasz Kopczynski <tomek@kopczynski.net.pl> Date:   2016-11-01T18:49:06Z        CAMEL-10344  : RouteIdFactory - assigning route ids based on uris                 $_$      ASF GitHub Bot added a comment  - 08/Nov/16 09:33   Github user asfgit closed the pull request at: https://github.com/apache/camel/pull/1242          ASF GitHub Bot added a comment  - 08/Nov/16 09:33                    Github user asfgit closed the pull request at:       https://github.com/apache/camel/pull/1242                 $_$      Claus Ibsen added a comment  - 08/Nov/16 09:51   For the rest routes we may want to replace / with - in the name, so it preserves the full path and the verb.rest fooget postthen its 2 routes with idget-foopost-fooAlso if there is nested paths we preserve the full namerest fooget bar post barthen itsget-foo-barpost-foo-barAnd we would need some unit tests for rest-dsl routes.          Claus Ibsen added a comment  - 08/Nov/16 09:51                    For the rest routes we may want to replace / with - in the name, so it preserves the full path and the verb.  rest foo get  post  then its 2 routes with id  get-foo post-foo Also if there is nested paths we preserve the full name  rest foo get bar  post bar  then its  get-foo-bar post-foo-bar And we would need some unit tests for rest-dsl routes.                $_$      Claus Ibsen added a comment  - 08/Nov/16 09:51   We also would need an unit test where some of the routes have explicit assigned id with .routeId(""myRoute""), which this factory should not override.          Claus Ibsen added a comment  - 08/Nov/16 09:51                    We also would need an unit test where some of the routes have explicit assigned id with .routeId(""myRoute""), which this factory should not override.                $_$      ASF GitHub Bot added a comment  - 30/Nov/16 22:06   GitHub user tkopczynski opened a pull request: https://github.com/apache/camel/pull/1324 CAMEL-10344: RouteIdFactory for rest routes    This PR extends the functionality introduced in #1242 by better handling rest routes. The implementation was written following the suggestions made in #1242 by @davsclaus You can merge this pull request into a Git repository by running:    $ git pull https://github.com/tkopczynski/camel camel-10344-followupAlternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/1324.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #1324commit 48c82ab710acce590038519fa12b2b810986b001Author: Tomasz Kopczynski <tomek@kopczynski.net.pl>Date:   2016-11-27T19:05:49Z CAMEL-10344: RouteIdFactory for rest routes          ASF GitHub Bot added a comment  - 30/Nov/16 22:06                    GitHub user tkopczynski opened a pull request:       https://github.com/apache/camel/pull/1324         CAMEL-10344  : RouteIdFactory for rest routes      This PR extends the functionality introduced in #1242 by better handling rest routes. The implementation was written following the suggestions made in #1242 by @davsclaus   You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/tkopczynski/camel  camel-10344-followup  Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/1324.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #1324   commit 48c82ab710acce590038519fa12b2b810986b001 Author: Tomasz Kopczynski <tomek@kopczynski.net.pl> Date:   2016-11-27T19:05:49Z        CAMEL-10344  : RouteIdFactory for rest routes                 $_$      ASF GitHub Bot added a comment  - 01/Dec/16 11:43   Github user tkopczynski closed the pull request at: https://github.com/apache/camel/pull/1324          ASF GitHub Bot added a comment  - 01/Dec/16 11:43                    Github user tkopczynski closed the pull request at:       https://github.com/apache/camel/pull/1324                 $_$      Claus Ibsen added a comment  - 01/Dec/16 11:48   Thanks for the PRs          Claus Ibsen added a comment  - 01/Dec/16 11:48                    Thanks for the PRs                "
12,Support univocity BeanListProcessor,New Feature,Unassigned,abccbaandy,"

I want use BeanListProcessor feature to map vo field with csv header name
https://github.com/uniVocity/univocity-parsers#using-annotations-to-map-your-java-beans
But I can't find any relate option to use this feature, maybe it's not support in camel univocity?
https://github.com/apache/camel/blob/master/components/camel-univocity-parsers/src/main/docs/univocity-csv-dataformat.adoc
btw, I can't find 


camel-univocity-parsers


 in Components selection 

",28/Mar/18 08:07,02/Sep/22 11:07,Resolved,Minor,02/Sep/22 11:07,https://issues.apache.org/jira/browse/CAMEL-12411,
13,"Support ""oneOf"" requirements of attributes inside the Catalog",Improvement,Unassigned,Aurélien Pupier,"

There are some components that allow to configure an option on either component or endpoint that would be required.
For instance the ""operation"" parameter for aws2-iam

",14/Dec/20 09:33,24/Jul/23 17:45,Resolved,Minor,24/Jul/23 17:45,https://issues.apache.org/jira/browse/CAMEL-15943,"      Luca Burgazzoli added a comment  - 14/Dec/20 09:44   We may think to use json schema to describe components, similar to what we did for the YAML DSL in camel-k however I'm curious to know how tools should validate ""oneOf"" as the parameter can be set in completely unrelated file, using an environment variable or with a custom component set-up.          Luca Burgazzoli added a comment  - 14/Dec/20 09:44                    We may think to use json schema to describe components, similar to what we did for the YAML DSL in camel-k however I'm curious to know how tools should validate ""oneOf"" as the parameter can be set in completely unrelated file, using an environment variable or with a custom component set-up.                $_$      Auru00E9lien Pupier added a comment  - 14/Dec/20 09:51   From tooling point of view, we can consider adding a boolean flag that indicates when this is the case - but what should the name be?using just a boolean won't allow to know with which other properties it is linked to.I do not think that it will provide more information than setting the attribute required to false and just mentioning in documentation that ""one of"" attributes must be set.With yaml spec, it is expressed by a ""required -> ""oneOf"" attribute at a higher level listing the required properties https://json-schema.org/understanding-json-schema/reference/combining.html#oneof          Auru00E9lien Pupier added a comment  - 14/Dec/20 09:51                     From tooling point of view, we can consider adding a boolean flag that indicates when this is the case - but what should the name be?   using just a boolean won't allow to know with which other properties it is linked to.I do not think that it will provide more information than setting the attribute required to false and just mentioning in documentation that ""one of"" attributes must be set.  With yaml spec, it is expressed by a ""required -> ""oneOf"" attribute at a higher level listing the required properties  https://json-schema.org/understanding-json-schema/reference/combining.html#oneof                 $_$      Luca Burgazzoli added a comment  - 14/Dec/20 09:59   My question was more about validation, so you don't expect to have the IDE to validate the URI then, right ?          Luca Burgazzoli added a comment  - 14/Dec/20 09:59                    My question was more about validation, so you don't expect to have the IDE to validate the URI then, right ?                $_$      Auru00E9lien Pupier added a comment  - 14/Dec/20 10:00   I'm curious to know how tools should validate ""oneOf"" as the parameter can be set in completely unrelated file, using an environment variable or with a custom component set-up.there is the same problem for normal ""required"" properties. It is not specific to this case. Currently, tooling is assuming that everything is declared in the same file. There was no issues/enhancements reported for several years (it is also part of Eclipse Fuse Tooling validation).Maybe the use case will occur more often with Camel K/Camel Kafka connector? it would mean that we cannot validate anymore requirements of properties.          Auru00E9lien Pupier added a comment  - 14/Dec/20 10:00                     I'm curious to know how tools should validate ""oneOf"" as the parameter can be set in completely unrelated file, using an environment variable or with a custom component set-up.   there is the same problem for normal ""required"" properties. It is not specific to this case. Currently, tooling is assuming that everything is declared in the same file. There was no issues/enhancements reported for several years (it is also part of Eclipse Fuse Tooling validation).  Maybe the use case will occur more often with Camel K/Camel Kafka connector? it would mean that we cannot validate anymore requirements of properties.                $_$      Auru00E9lien Pupier added a comment  - 14/Dec/20 10:02   My question was more about validation, so you don't expect to have the IDE to validate the URI then, right ?My goal of having a way to specify that ""one of attributes is required"" in the catalog is to provide validation at design time, so in the IDE.          Auru00E9lien Pupier added a comment  - 14/Dec/20 10:02                     My question was more about validation, so you don't expect to have the IDE to validate the URI then, right ?   My goal of having a way to specify that ""one of attributes is required"" in the catalog is to provide validation at design time, so in the IDE.                $_$      Luca Burgazzoli added a comment  - 14/Dec/20 10:12   Maybe it would be better to flatten the properties and have an option to determine where they applies so if they are marked as mandatory, it is explicit that setting at component or endpoint level is equivalent (otherwhise you need to apply the oneOf to both the definitions) but still, I'm curious how the validation can be performed ad design time  given that the property may exists only at runtime          Luca Burgazzoli added a comment  - 14/Dec/20 10:12                    Maybe it would be better to flatten the properties and have an option to determine where they applies so if they are marked as mandatory, it is explicit that setting at component or endpoint level is equivalent (otherwhise you need to apply the oneOf to both the definitions) but still, I'm curious how the validation can be performed ad design time   given that the property may exists only at runtime                $_$      Luca Burgazzoli added a comment  - 14/Dec/20 10:14   > Maybe the use case will occur more often with Camel K/Camel Kafka connector? it would mean that we cannot validate anymore requirements of properties.I don't think so, on spring-boot configuring component using properties is quite a common           Luca Burgazzoli added a comment  - 14/Dec/20 10:14                    > Maybe the use case will occur more often with Camel K/Camel Kafka connector? it would mean that we cannot validate anymore requirements of properties.  I don't think so, on spring-boot configuring component using properties is quite a common                 $_$      Auru00E9lien Pupier added a comment  - 14/Dec/20 10:32   - edited   flatten the properties and have an option to determine where they applies so if they are marked as mandatory, it is explicit that setting at component or endpoint level is equivalentthis requires that it is a property with the same name.it doesn't cover the case for instance of having ""homeAddress"" and ""officeAddress"" and requires to have one of the 2.But I don't know if it happens currently or if we want to have it happening. If it doesn't, it sounds simpler.The downside of this approach is that I think it will require to radically change the catalog and it will break the backward-compatibility.I'm curious how the validation can be performed ad design time  given that the property may exists only at runtimeThe validation currently expects all required properties to be defined at design time. It is not specific to ""oneOf"".This is an assumption that was good enough for several years but it is possible that it is no more reliable enough and deactivate this kind of validation in Camel catalog and Eclipse Fuse Tooling (and not implement it for Camel Kafka Connector in Camel Language Server)          Auru00E9lien Pupier added a comment  - 14/Dec/20 10:32   - edited                    flatten the properties and have an option to determine where they applies so if they are marked as mandatory, it is explicit that setting at component or endpoint level is equivalent   this requires that it is a property with the same name. it doesn't cover the case for instance of having ""homeAddress"" and ""officeAddress"" and requires to have one of the 2.  But I don't know if it happens currently or if we want to have it happening. If it doesn't, it sounds simpler.  The downside of this approach is that I think it will require to radically change the catalog and it will break the backward-compatibility.   I'm curious how the validation can be performed ad design time  given that the property may exists only at runtime   The validation currently expects all required properties to be defined at design time. It is not specific to ""oneOf"". This is an assumption that was good enough for several years but it is possible that it is no more reliable enough and deactivate this kind of validation in Camel catalog and Eclipse Fuse Tooling (and not implement it for Camel Kafka Connector in Camel Language Server)                $_$      Auru00E9lien Pupier added a comment  - 14/Dec/20 10:57   > > From tooling point of view, we can consider adding a boolean flag that indicates when this is the case - but what should the name be?> > using just a boolean won't allow to know with which other properties it is linked to.I do not think that it will provide more information than setting the attribute required to false and just mentioning in documentation that ""one of"" attributes must be set.> > flatten the properties and have an option to determine where they applies so if they are marked as mandatory, it is explicit that setting at component or endpoint level is equivalent> this requires that it is a property with the same name.> it doesn't cover the case for instance of having ""homeAddress"" and ""officeAddress"" and requires to have one of the 2.> But I don't know if it happens currently or if we want to have it happening. If it doesn't, it sounds simpler.if we want to handle only the case of same name but putt at different levels, the boolean might be enough. Something like canBeSetAtAnotherLevel (what a long and not nice naming...)          Auru00E9lien Pupier added a comment  - 14/Dec/20 10:57                    > > From tooling point of view, we can consider adding a boolean flag that indicates when this is the case - but what should the name be? >  > using just a boolean won't allow to know with which other properties it is linked to.I do not think that it will provide more information than setting the attribute required to false and just mentioning in documentation that ""one of"" attributes must be set.  > > flatten the properties and have an option to determine where they applies so if they are marked as mandatory, it is explicit that setting at component or endpoint level is equivalent  > this requires that it is a property with the same name. > it doesn't cover the case for instance of having ""homeAddress"" and ""officeAddress"" and requires to have one of the 2.  > But I don't know if it happens currently or if we want to have it happening. If it doesn't, it sounds simpler.  if we want to handle only the case of same name but putt at different levels, the boolean might be enough. Something like  canBeSetAtAnotherLevel  (what a long and not nice naming...)                "
14,Transactional hazelcast:seda component uses not transaction aware queue,Improvement,Claus Ibsen,Kirill Merkushev,"

As mentioned in docs 
http://docs.hazelcast.org/docs/3.8.4/manual/html-single/index.html#creating-a-transaction-interface
Data structures should be transaction-aware and initialized inside of transaction context. Now hazelcast seda component uses queue initialized externally for the transaction. So when we rollback transaction - things stay the same like we already committed changes (this simply noop).
Patch should look like (but exactly this version fails tests, so I should investigate more)

index 7e3b24cc8f..cebd69ce16 100644
--- a/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaConsumer.java
+++ b/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaConsumer.java
@@ -16,10 +16,10 @@
  */
 package org.apache.camel.component.hazelcast.seda;
 
-import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;
 
+import com.hazelcast.core.BaseQueue;
 import com.hazelcast.transaction.TransactionContext;
 
 import org.apache.camel.AsyncCallback;
@@ -71,7 +71,7 @@ public class HazelcastSedaConsumer extends DefaultConsumer implements Runnable {
     }
 
     public void run() {
-        final BlockingQueue<?> queue = endpoint.getQueue();
+        BaseQueue<?> queue = endpoint.getHazelcastInstance().getQueue(endpoint.getConfiguration().getQueueName());
 
         while (queue != null && isRunAllowed()) {
             final Exchange exchange = this.getEndpoint().createExchange();
@@ -85,6 +85,7 @@ public class HazelcastSedaConsumer extends DefaultConsumer implements Runnable {
                     if (transactionCtx != null) {
                         log.trace(""Begin transaction: {}"", transactionCtx.getTxnId());
                         transactionCtx.beginTransaction();
+                        queue = transactionCtx.getQueue(endpoint.getConfiguration().getQueueName());
                     }
                 }
 



",15/Sep/17 15:33,19/Sep/17 11:06,Resolved,Major,19/Sep/17 07:36,https://issues.apache.org/jira/browse/CAMEL-11777,"      ASF GitHub Bot added a comment  - 18/Sep/17 09:15   GitHub user lanwen opened a pull request: https://github.com/apache/camel/pull/1936 CAMEL-11777: Use transaction aware queue in hazelcast:seda component    As mentioned in docs of hz (any version, current for example) http://docs.hazelcast.org/docs/3.8.4/manual/html-single/index.html#creating-a-transaction-interface    Transaction do its work if queue initialized with help of transaction ctxYou can merge this pull request into a Git repository by running:    $ git pull https://github.com/lanwen/camel CAMEL-11777Alternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/1936.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #1936commit c679eaf67acb129137b04b8199c4ddbafa5b28b5Author: Kirill Merkushev <lanwen@yandex.ru>Date:   2017-09-18T09:13:49Z CAMEL-11777: Use transaction aware queue in hazelcast:seda component    As mentioned in docs of hz (any version, current for example) http://docs.hazelcast.org/docs/3.8.4/manual/html-single/index.html#creating-a-transaction-interface    Transaction do its work if queue initialized with help of transaction ctx          ASF GitHub Bot added a comment  - 18/Sep/17 09:15                    GitHub user lanwen opened a pull request:       https://github.com/apache/camel/pull/1936         CAMEL-11777  : Use transaction aware queue in hazelcast:seda component      As mentioned in docs of hz (any version, current for example)      http://docs.hazelcast.org/docs/3.8.4/manual/html-single/index.html#creating-a-transaction-interface      Transaction do its work if queue initialized with help of transaction ctx  You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/lanwen/camel    CAMEL-11777    Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/1936.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #1936   commit c679eaf67acb129137b04b8199c4ddbafa5b28b5 Author: Kirill Merkushev <lanwen@yandex.ru> Date:   2017-09-18T09:13:49Z        CAMEL-11777  : Use transaction aware queue in hazelcast:seda component      As mentioned in docs of hz (any version, current for example)      http://docs.hazelcast.org/docs/3.8.4/manual/html-single/index.html#creating-a-transaction-interface      Transaction do its work if queue initialized with help of transaction ctx                 $_$      Claus Ibsen added a comment  - 19/Sep/17 07:36   Thanks for the PR          Claus Ibsen added a comment  - 19/Sep/17 07:36                    Thanks for the PR                $_$      ASF GitHub Bot added a comment  - 19/Sep/17 11:06   Github user lanwen closed the pull request at: https://github.com/apache/camel/pull/1936          ASF GitHub Bot added a comment  - 19/Sep/17 11:06                    Github user lanwen closed the pull request at:       https://github.com/apache/camel/pull/1936                 "
15,RedeliveryErrorHandler's suppressed exceptions cause memory leak and logging issue,Bug,Claus Ibsen,Bence,"

Hi There,
I am a bit dubious about the behavior of RedeliveryErrorHandler's handleException() method in camel-core-processor bundle.
Chaining all exceptions in suppressedExceptions of Throwable during the redelivery process may not be the original intention, at least the comment below is suggesting that the goal was something else here.

if (previous != null && previous != e) {
// a 2nd exception was thrown while handling a previous exception
// so we need to add the previous as suppressed by the new exception
// see also FatalFallbackErrorHandler
The consequence of adding the previous exception to the suppressedExceptions list of the current one is building up an infinite chain of objects, besides a single log entry can be huge after a couple of retry attempts, see attached log.
I think the best would be to turn this feature on/off by a configuration parameter.
Thank you.

",18/May/23 13:24,19/May/23 16:35,Resolved,Minor,19/May/23 16:35,https://issues.apache.org/jira/browse/CAMEL-19371,"      Claus Ibsen added a comment  - 18/May/23 20:03   Yeah that is a good point about we should likely just keep the last error so the depth does not grow soo big          Claus Ibsen added a comment  - 18/May/23 20:03                    Yeah that is a good point about we should likely just keep the last error so the depth does not grow soo big                $_$      Claus Ibsen added a comment  - 18/May/23 20:04   its not a memory leak as the memory can be reclaimed, its just a long stacktrace if retry is many times. And you should not have forever retries then you have another problem on your hand          Claus Ibsen added a comment  - 18/May/23 20:04                    its not a memory leak as the memory can be reclaimed, its just a long stacktrace if retry is many times. And you should not have forever retries then you have another problem on your hand                $_$      Bence added a comment  - 19/May/23 07:47   I am afraid it is, since all exceptions thrown during the redelivery mechanism chained together and attached to the exchange via CamelExceptionCaught property (previous exception:Throwable previous = exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Throwable.class);On the other hand redeliveryPolicy maximumRedeliveries -1 is a valid option, this way the suppressedExceptions chain can definitely cause a memory leak.           Bence added a comment  - 19/May/23 07:47                    I am afraid it is, since all exceptions thrown during the redelivery mechanism chained together and attached to the exchange via CamelExceptionCaught property (previous exception:    Throwable previous  =  exchange .getProperty( ExchangePropertyKey . EXCEPTION_CAUGHT ,  Throwable . class );   On the other hand redeliveryPolicy maximumRedeliveries -1 is a valid option, this way the suppressedExceptions chain can definitely cause a memory leak.                   $_$      Claus Ibsen added a comment  - 19/May/23 08:17   a leak is memory that cannot be reclaimedwhat you describe is memory usage can become high if you have forever error handling, and using -1 is a bad practice          Claus Ibsen added a comment  - 19/May/23 08:17                    a leak is memory that cannot be reclaimed what you describe is memory usage can become high if you have forever error handling, and using -1 is a bad practice                $_$      Claus Ibsen added a comment  - 19/May/23 13:16   Okay have a pending fix, as this manifest in camel-jms and only when doing error handling that causes a 2nd error.However we may consider removing adding suppressed, but then end users may not see this from a result exception as they can only see the last, and not the original.          Claus Ibsen added a comment  - 19/May/23 13:16                    Okay have a pending fix, as this manifest in camel-jms and only when doing error handling that causes a 2nd error.  However we may consider removing adding suppressed, but then end users may not see this from a result exception as they can only see the last, and not the original.                "
16,Lucene upgrade violates elasticsearch assertion,Bug,Unassigned,Thomas Diesler,"

Elastic search asserts the current Lucene version like this

    public static final Version V_2_3_1 = new Version(V_2_3_1_ID, false, org.apache.lucene.util.Version.LUCENE_5_5_0);

    public static final Version CURRENT = V_2_3_1;

    static {
        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : ""Version must be upgraded to ["" + Lucene.VERSION + ""] is still set to ["" + CURRENT.luceneVersion + ""]"";
    }


which effectively means that no other Lucene version is accepted but 5.5.0
Camel now integrates lucene-5.5.3 as part of this commit, which then leads to

11:54:49,545 SEVERE [org.jboss.arquillian.protocol.jmx.JMXTestRunner] (pool-3-thread-1) Failed: org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testIndexContentUsingHeaders: java.lang.AssertionError: Version must be upgraded to [5.5.3] is still set to [5.5.0]
	at org.elasticsearch.Version.<clinit>(Version.java:302)
	at org.elasticsearch.node.Node.<init>(Node.java:140)
	at org.elasticsearch.node.NodeBuilder.build(NodeBuilder.java:143)
	at org.elasticsearch.node.NodeBuilder.node(NodeBuilder.java:150)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.initEleasticSearchClient(ElasticSearchIntegrationTest.java:220)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testIndexContentUsingHeaders(ElasticSearchIntegrationTest.java:80)
...
java.lang.NoClassDefFoundError: Could not initialize class org.elasticsearch.Version
	at org.elasticsearch.node.Node.<init>(Node.java:140)
	at org.elasticsearch.node.NodeBuilder.build(NodeBuilder.java:143)
	at org.elasticsearch.node.NodeBuilder.node(NodeBuilder.java:150)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.initEleasticSearchClient(ElasticSearchIntegrationTest.java:220)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testGetContent(ElasticSearchIntegrationTest.java:112)


Camel can likely not use another version of Lucene than Elasticsearch defines. Alternatively it may be possible to install multiple versions of Lucene and wire Elasticsearch to the one it requires. 

",12/Sep/16 10:18,15/Sep/16 14:26,Resolved,Major,15/Sep/16 14:26,https://issues.apache.org/jira/browse/CAMEL-10310,
17,broken links at components page,Task,Claus Ibsen,Gardella Juan Pablo,"

At http://camel.apache.org/components.html, there are broken links

at Krati component. It refers to http://data.linkedin.com/opensource/krati and this URL show 404.
camel-msv


",04/Jul/14 13:52,04/Jul/14 14:15,Resolved,Trivial,04/Jul/14 14:08,https://issues.apache.org/jira/browse/CAMEL-7579,"      Gardella Juan Pablo added a comment  - 04/Jul/14 14:12   davsclaus They are still broken.           Gardella Juan Pablo added a comment  - 04/Jul/14 14:12                     davsclaus  They are still broken.                 $_$      Claus Ibsen added a comment  - 04/Jul/14 14:14   Fixed at wiki which takes some time to update to static site.          Claus Ibsen added a comment  - 04/Jul/14 14:14                    Fixed at wiki which takes some time to update to static site.                $_$      Gardella Juan Pablo added a comment  - 04/Jul/14 14:15   Oh, ok. I will check tomorrow. Thanks!          Gardella Juan Pablo added a comment  - 04/Jul/14 14:15                    Oh, ok. I will check tomorrow. Thanks!                "
18,Upgrade to JUnit 4.4 in camel-cxf,Improvement,Willem Jiang,Willem Jiang,"

Since there are some CXF endpoint start in camel-cxf endpoint per test, we can leverage the JUnit4's start with class annotation to start these endpoints within the Unit test. 

",05/Jun/09 03:34,21/Nov/09 11:59,Closed,Major,open,https://issues.apache.org/jira/browse/CAMEL-1673,      Willem Jiang added a comment  - 19/Jun/09 11:21   trunkhttp://svn.apache.org/viewvc?rev=784510&view=rev          Willem Jiang added a comment  - 19/Jun/09 11:21                    trunk   http://svn.apache.org/viewvc?rev=784510&view=rev                 $_$      Claus Ibsen added a comment  - 21/Nov/09 11:59   Closing all 2.0M3 tickets          Claus Ibsen added a comment  - 21/Nov/09 11:59                    Closing all 2.0M3 tickets                
19,Add ManagementObjectStrategy to SPI to allow customization of actual underlying mbeans registered by Camel,Improvement,Claus Ibsen,Claus Ibsen,"

When Camel registers MBeans in JMX it uses a lifecycle strategy for that, eg the lifecycle strategy is triggered when X is added/remove to Camel. The JMX supported lifecycle strategy is DefaultManagementLifecycleStrategy. That class has some private code that creates the actual MBeans being used when registering mbeans.
So far we have a pluggable SPI for defining ObjectName for the mbeans (ManagementNameStrategy), so you can control that if you want.
Likewise we should have a pluggable SPI for the logic that creates the mbean to be used. It should be named: ManagementObjectStrategy.
We should then move the private logic from DefaultManagementLifecycleStrategy to a default implementation of that new SPI. 
This makes it easier for end users and Camel itself to register new mbeans, and reusing as much default code from Camel out of the box.

",26/Jun/11 12:02,26/Jun/11 16:31,Resolved,Minor,26/Jun/11 16:31,https://issues.apache.org/jira/browse/CAMEL-4156,
20,Added  a check point after configuring the the consumer properties ,Improvement,Willem Jiang,Willem Jiang,"

To avoid the the consumer's parameters configuration spelling error.

",26/Aug/08 03:28,16/Feb/09 05:51,Closed,Major,open,https://issues.apache.org/jira/browse/CAMEL-848,      Claus Ibsen added a comment  - 16/Feb/09 05:51   Closing all 1.5.0 issues          Claus Ibsen added a comment  - 16/Feb/09 05:51                    Closing all 1.5.0 issues                
21,Camel JMX useJmx=false does not work,Bug,Hadrian Zbarcea,Claus Ibsen,,27/Jun/08 17:52,06/Jul/08 06:29,Closed,Major,open,https://issues.apache.org/jira/browse/CAMEL-643,      Claus Ibsen added a comment  - 27/Jun/08 17:53   See patch in CAMEL-637          Claus Ibsen added a comment  - 27/Jun/08 17:53                    See patch in   CAMEL-637                  
22,camel3 - Optimize XmlConverterLoader,Improvement,Claus Ibsen,Claus Ibsen,"

I wonder if we can optimize XmlConverterLoader this to init the getXmlConverter once only and avoid synchronized.
It does take a bit time to load according to the yourkit profiler

",13/Aug/19 12:01,14/Aug/19 07:53,Resolved,Major,14/Aug/19 07:53,https://issues.apache.org/jira/browse/CAMEL-13863,
23,Unable to init camel file with JBang for multi dot file name suffix - eg 'foo.camel.xml',Bug,Claus Ibsen,Dominik Jelinek,"



jbang run -Dcamel.jbang.version=3.20.3 camel@apache/camel init foo.camel.xml

> Error: Unsupported file type: camel.xml

Tried also with latest camel version -Dcamel.jbang.version=4.0.0-M2

",25/Apr/23 14:51,26/May/23 08:22,Resolved,Minor,26/Apr/23 09:02,https://issues.apache.org/jira/browse/CAMEL-19296,"      Dominik Jelinek added a comment  - 25/Apr/23 14:55   davsclaus I am sorry I did clone of previous reported same bug and it was cloned also with assignee which I cannot modify           Dominik Jelinek added a comment  - 25/Apr/23 14:55                     davsclaus  I am sorry I did clone of previous reported same bug and it was cloned also with assignee which I cannot modify                  $_$      Claus Ibsen added a comment  - 25/Apr/23 17:56   This is only for yaml files where you have xxx.camel.yaml - for any other the files are single extension only.          Claus Ibsen added a comment  - 25/Apr/23 17:56                    This is only for yaml files where you have xxx.camel.yaml - for any other the files are single extension only.                $_$      Auru00E9lien Pupier added a comment  - 26/Apr/23 07:49   Allowing xxx.camel.xml is helping integrations in VS Code. VS Code is allowing to base file type only on the filename, not on the content. For instance, it will allow to provide a specific icon in explorer, automatically open with a specific editor, filter commands in contextual menus, command palette and actions.In a more general way, it would be even better to provide whatever xxx.yyy.xml as this is a valid pattern for xml filenames.          Auru00E9lien Pupier added a comment  - 26/Apr/23 07:49                    Allowing xxx.camel.xml is helping integrations in VS Code. VS Code is allowing to base file type only on the filename, not on the content. For instance, it will allow to provide a specific icon in explorer, automatically open with a specific editor, filter commands in contextual menus, command palette and actions.  In a more general way, it would be even better to provide whatever xxx.yyy.xml as this is a valid pattern for xml filenames.                $_$      Claus Ibsen added a comment  - 26/Apr/23 09:01   Okay that is better in this light to make it consistent for markup languages so xml and yaml can do the same file naming wise.          Claus Ibsen added a comment  - 26/Apr/23 09:01                    Okay that is better in this light to make it consistent for markup languages so xml and yaml can do the same file naming wise.                "
24,camel-core - ResourceHelper to have method to tell if the resource is classpath or not,Improvement,Unassigned,Claus Ibsen,"

We should add method to ResourceHelper so resource based components can use this to know if it will be loaded from classpath or not.
This can be used to optimize for build time optimization as classpath can be initializer earlier. Where as file/http has to be loaded at runtime.

",26/May/20 07:08,26/May/20 07:35,Resolved,Minor,26/May/20 07:35,https://issues.apache.org/jira/browse/CAMEL-15110,
25,document - bean parameter binding - @Headers,Task,Claus Ibsen,Claus Ibsen,"

Write some more about that using @Headers Map headers you can also add new headers to the exchange. Whereas the @Header('headerId') is a read-only binding
eg you can add a new key with:
headers.put(""newKey"", ""newValue"");

",21/Oct/08 10:57,23/Oct/08 04:33,Closed,Major,open,https://issues.apache.org/jira/browse/CAMEL-1006,      Claus Ibsen added a comment  - 22/Oct/08 04:51   Updated wiki at:http://activemq.apache.org/camel/parameter-binding-annotations.html          Claus Ibsen added a comment  - 22/Oct/08 04:51                    Updated wiki at:  http://activemq.apache.org/camel/parameter-binding-annotations.html                 $_$      Claus Ibsen added a comment  - 23/Oct/08 04:33   Closing 1.5 issues          Claus Ibsen added a comment  - 23/Oct/08 04:33                    Closing 1.5 issues                
26,Unnecessary restriction on readLockTimeout with readLockMinAge,Improvement,Claus Ibsen,Jyrki Ruuskanen,"

When using readLockMinAge parameter in the file component, readLockTimeout is required to be larger than readLockCheckInterval + readLockMinAge.
This check is unnecessary. It was originally added with the use case described in CAMEL-8421 in mind, but it just ends up limiting and complicating readLockMinAge parameter's usage for no gain.

",08/Sep/16 11:00,11/Sep/16 06:48,Resolved,Minor,11/Sep/16 06:44,https://issues.apache.org/jira/browse/CAMEL-10298,"      ASF GitHub Bot added a comment  - 08/Sep/16 11:05   GitHub user yuruki opened a pull request: https://github.com/apache/camel/pull/1162 CAMEL-10298: Remove readLockTimeout check from readLockMinAge https://issues.apache.org/jira/browse/CAMEL-10298You can merge this pull request into a Git repository by running:    $ git pull https://github.com/yuruki/camel camel-readlockminageAlternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/1162.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #1162commit 3ce77320493fb680570c3e4a31f8a276052d4255Author: Jyrki Ruuskanen <yuruki@kotikone.fi>Date:   2016-09-08T11:03:00Z CAMEL-10298: Remove readLockTimeout check from readLockMinAge          ASF GitHub Bot added a comment  - 08/Sep/16 11:05                    GitHub user yuruki opened a pull request:       https://github.com/apache/camel/pull/1162         CAMEL-10298  : Remove readLockTimeout check from readLockMinAge       https://issues.apache.org/jira/browse/CAMEL-10298   You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/yuruki/camel  camel-readlockminage  Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/1162.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #1162   commit 3ce77320493fb680570c3e4a31f8a276052d4255 Author: Jyrki Ruuskanen <yuruki@kotikone.fi> Date:   2016-09-08T11:03:00Z        CAMEL-10298  : Remove readLockTimeout check from readLockMinAge                 $_$      ASF GitHub Bot added a comment  - 08/Sep/16 11:37   GitHub user yuruki opened a pull request: https://github.com/apache/camel/pull/1163 CAMEL-10298: Remove readLockTimeout check from readLockMinAge (2.17.x) https://issues.apache.org/jira/browse/CAMEL-10298You can merge this pull request into a Git repository by running:    $ git pull https://github.com/yuruki/camel camel-readlockminage-2.17.xAlternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/1163.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #1163commit a0cd47f5695116776c216dcdc9a0ff0f8f7054b0Author: Jyrki Ruuskanen <yuruki@kotikone.fi>Date:   2016-09-08T11:34:32Z CAMEL-10298: Remove readLockTimeout check from readLockMinAge (2.17.x)          ASF GitHub Bot added a comment  - 08/Sep/16 11:37                    GitHub user yuruki opened a pull request:       https://github.com/apache/camel/pull/1163         CAMEL-10298  : Remove readLockTimeout check from readLockMinAge (2.17.x)       https://issues.apache.org/jira/browse/CAMEL-10298   You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/yuruki/camel  camel-readlockminage-2.17.x  Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/1163.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #1163   commit a0cd47f5695116776c216dcdc9a0ff0f8f7054b0 Author: Jyrki Ruuskanen <yuruki@kotikone.fi> Date:   2016-09-08T11:34:32Z        CAMEL-10298  : Remove readLockTimeout check from readLockMinAge (2.17.x)                 $_$      ASF GitHub Bot added a comment  - 10/Sep/16 05:10   Github user yuruki closed the pull request at: https://github.com/apache/camel/pull/1163          ASF GitHub Bot added a comment  - 10/Sep/16 05:10                    Github user yuruki closed the pull request at:       https://github.com/apache/camel/pull/1163                 $_$      Claus Ibsen added a comment  - 11/Sep/16 06:44   Thanks for the PR          Claus Ibsen added a comment  - 11/Sep/16 06:44                    Thanks for the PR                $_$      ASF GitHub Bot added a comment  - 11/Sep/16 06:48   Github user yuruki closed the pull request at: https://github.com/apache/camel/pull/1162          ASF GitHub Bot added a comment  - 11/Sep/16 06:48                    Github user yuruki closed the pull request at:       https://github.com/apache/camel/pull/1162                 "
27,Duplicate links for a particular EIP,Task,Unassigned,Aemie,"

I have noticed a few duplications of EIP under the camel website. I need a clarification whether it is a bug and unwanted or is it designed to be structured the way it is. 
Under EIP - 

Dynamic Router: There are 2 pages related to the dynamic router under the EIP section. One page encompasses further detailing than the other page. This page (https://camel.apache.org/components/latest/eips/dynamic-router.html)  links to one of the dynamic router pages with full detailed documentation and this is the other page(https://camel.apache.org/components/latest/eips/dynamicRouter-eip.html) on dynamic router encompassing the subset of the docs of the first link I sent.
Request Reply: There is 2 identical duplicate page entailing the same information. The first link to the page is https://camel.apache.org/components/latest/eips/request-reply.html and the second link to the page is https://camel.apache.org/components/latest/eips/requestReply-eip.html.


",14/Jul/20 18:50,22/Jul/20 05:26,Resolved,Minor,22/Jul/20 05:26,https://issues.apache.org/jira/browse/CAMEL-15302,"      Zoran Regvart added a comment  - 15/Jul/20 10:55   Nicely spotted, thanks Aemie, +1 to removing the duplicate pages. One thing to watch out is that there could be pages that point to both documents and we need to change them to point to the single remaining document.          Zoran Regvart added a comment  - 15/Jul/20 10:55                    Nicely spotted, thanks  Aemie , +1 to removing the duplicate pages. One thing to watch out is that there could be pages that point to both documents and we need to change them to point to the single remaining document.                $_$      Aemie added a comment  - 15/Jul/20 14:35   zregvartu00A0I agree I have observed the linking of Dynamic Router and Request-Reply through the list of the EIP currently. I will have to make the changes to that along with the deletion of the duplication.          Aemie added a comment  - 15/Jul/20 14:35                     zregvart u00A0I agree I have observed the linking of Dynamic Router and Request-Reply through the list of the EIP currently. I will have to make the changes to that along with the deletion of the duplication.                 $_$      Zoran Regvart added a comment  - 16/Jul/20 19:08   Oh, and one more potential issue could be that some of those .adoc files might get updated automatically by the build tooling, I'm guessing it's the ones with -eip.adoc that should remain. davsclaus or acosentino might know better.          Zoran Regvart added a comment  - 16/Jul/20 19:08                    Oh, and one more potential issue could be that some of those  .adoc  files might get updated automatically by the build tooling, I'm guessing it's the ones with  -eip.adoc  that should remain.  davsclaus  or  acosentino  might know better.                $_$      Claus Ibsen added a comment  - 17/Jul/20 08:15   Yes the -eip.adoc files are the ones that are automatic updated if the EIP has new options etc. So if there is duplicates we should keep the -eip doc files. And if there is some content in the other file missing in -eip we should copy it over before deleting.          Claus Ibsen added a comment  - 17/Jul/20 08:15                    Yes the -eip.adoc files are the ones that are automatic updated if the EIP has new options etc. So if there is duplicates we should keep the -eip doc files. And if there is some content in the other file missing in -eip we should copy it over before deleting.                "
28,Splitter EIP - The sub exchanges should not contains on completions from original Exchange,Bug,Claus Ibsen,Claus Ibsen,"

See nabble
http://camel.465427.n5.nabble.com/Camel-calling-commit-too-early-when-using-split-seda-file-endpoint-tp2830894p2830894.html

",14/Sep/10 11:39,24/Apr/11 09:57,Closed,Minor,open,https://issues.apache.org/jira/browse/CAMEL-3121,"      Claus Ibsen added a comment  - 14/Sep/10 12:00   Added unit test to trunk: 996857.Cannot re produce the error on trunk.           Claus Ibsen added a comment  - 14/Sep/10 12:00                    Added unit test to trunk: 996857.  Cannot re produce the error on trunk.                 $_$      Claus Ibsen added a comment  - 14/Sep/10 12:00   I fixed some stuff on file commit stuff due another ticket, so this bug should be resolved as well.          Claus Ibsen added a comment  - 14/Sep/10 12:00                    I fixed some stuff on file commit stuff due another ticket, so this bug should be resolved as well.                $_$      Simon added a comment  - 14/Sep/10 12:09   The following post contains 2 problems :Issue 1:Cannot rename the file exception. It was found and fixed there:https://issues.apache.org/activemq/browse/CAMEL-2897But  the problem only fix when streaming is used. If streaming isn't used... the problem persist. Quick patch: Splitter.java private Iterable<ProcessorExchangePair> createProcessorExchangePairsList(                         Exchange exchange, Object value) {                 List<ProcessorExchangePair> result;                 Integer collectionSize = CollectionHelper.size(value);                 if (collectionSize != null) {                         result = new ArrayList<ProcessorExchangePair>(collectionSize);                 } else {                         result = new ArrayList<ProcessorExchangePair>();                 }                 Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable(                                 exchange, value);                 Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable                                 .iterator();                 while (iterator.hasNext()) {                         ProcessorExchangePair next = iterator.next();                         result.add(next);                 }                 return result;         } Issue 2:We found a problem of shutdown in the patch we submitted. Now we do not create a DefaultUNitOfWork we only set it at null.Quick patch: public Object next() {         Object part = iterator.next();         Exchange newExchange = exchange.copy();                 if (iterator.hasNext()) {                         newExchange.setUnitOfWork(null);                         }                        if (part instanceof Message) {                                                         newExchange.setIn((Message) part);                                                 } else {                                                         Message in = newExchange.getIn();                                                         in.setBody(part);                                                 }                                                 return createProcessorExchangePair(index++,                                                                 getProcessors().iterator().next(), newExchange);                                         }           Simon added a comment  - 14/Sep/10 12:09                    The following post contains 2 problems :  Issue 1: Cannot rename the file exception. It was found and fixed there:  https://issues.apache.org/activemq/browse/CAMEL-2897  But  the problem only fix when streaming is used. If streaming isn't used... the problem persist.  Quick patch:  Splitter.java  private Iterable<ProcessorExchangePair> createProcessorExchangePairsList(                          Exchange exchange, Object value) {                  List<ProcessorExchangePair> result;                  Integer collectionSize = CollectionHelper.size(value);                  if (collectionSize != null)  {                         result = new ArrayList<ProcessorExchangePair>(collectionSize);                 }  else  {                         result = new ArrayList<ProcessorExchangePair>();                 }                   Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable(                                  exchange, value);                  Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable                                  .iterator();                  while (iterator.hasNext())  {                         ProcessorExchangePair next = iterator.next();                         result.add(next);                 }                   return result;          }   Issue 2: We found a problem of shutdown in the patch we submitted. Now we do not create a DefaultUNitOfWork we only set it at null.  Quick patch:  public Object next() {          Object part = iterator.next();          Exchange newExchange = exchange.copy();                  if (iterator.hasNext())  {                         newExchange.setUnitOfWork(null);                         }                         if (part instanceof Message)  {                                                         newExchange.setIn((Message) part);                                                 }  else  {                                                         Message in = newExchange.getIn();                                                         in.setBody(part);                                                 }                                                   return createProcessorExchangePair(index++,                                                                  getProcessors().iterator().next(), newExchange);                                          }                 $_$      Simon added a comment  - 14/Sep/10 13:20   - edited   Hi Claus,We are still able to reproduce it with 2.5.0. (both problems)Did you try it on Windows ?Issue 1:from(""file:e:/test/camel"").split(body().tokenize("","")).process(new Processor() {        @Override        public void process(Exchange arg0) throws Exception {                Thread.sleep(2000);        }}); It looks like the testcase you`ve done for FileSplitStreamingWithChoiceTest.java except you need to remove streaming.Quick patch: Splitter.javaprivate Iterable<ProcessorExchangePair> createProcessorExchangePairsList(                        Exchange exchange, Object value) {                List<ProcessorExchangePair> result;                Integer collectionSize = CollectionHelper.size(value);                if (collectionSize != null) {                        result = new ArrayList<ProcessorExchangePair>(collectionSize);                } else {                        result = new ArrayList<ProcessorExchangePair>();                }                Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable(                                exchange, value);                Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable                                .iterator();                while (iterator.hasNext()) {                        ProcessorExchangePair next = iterator.next();                        result.add(next);                }                return result;        } Issue 2Quick Patch:public Object next() {        Object part = iterator.next();        Exchange newExchange = exchange.copy();                if (iterator.hasNext()) {                        newExchange.setUnitOfWork(null);                        }                        if (part instanceof Message) {                                                        newExchange.setIn((Message) part);                                                } else {                                                        Message in = newExchange.getIn();                                                        in.setBody(part);                                                }                                                return createProcessorExchangePair(index++,                                                                getProcessors().iterator().next(), newExchange);                                        }:          Simon added a comment  - 14/Sep/10 13:20   - edited                   Hi Claus,  We are still able to reproduce it with 2.5.0. (both problems)  Did you try it on Windows ?  Issue 1:    from( ""file:e:/test/camel"" ).split(body().tokenize( "","" )).process( new  Processor() {        @Override         public  void process(Exchange arg0)  throws  Exception {                 Thread .sleep(2000);        }});     It looks like the testcase you`ve done for FileSplitStreamingWithChoiceTest.java except you need to remove streaming. Quick patch: Splitter.java     private  Iterable<ProcessorExchangePair> createProcessorExchangePairsList(                        Exchange exchange,  Object  value) {                List<ProcessorExchangePair> result;                 Integer  collectionSize = CollectionHelper.size(value);                 if  (collectionSize !=  null ) {                        result =  new  ArrayList<ProcessorExchangePair>(collectionSize);                }  else  {                        result =  new  ArrayList<ProcessorExchangePair>();                }                Iterable<ProcessorExchangePair> createProcessorExchangePairsIterable = createProcessorExchangePairsIterable(                                exchange, value);                Iterator<ProcessorExchangePair> iterator = createProcessorExchangePairsIterable                                .iterator();                 while  (iterator.hasNext()) {                        ProcessorExchangePair next = iterator.next();                        result.add(next);                }                 return  result;        }     Issue 2 Quick Patch:     public   Object  next() {         Object  part = iterator.next();        Exchange newExchange = exchange.copy();                 if  (iterator.hasNext()) {                        newExchange.setUnitOfWork( null );                        }                         if  (part  instanceof  Message) {                                                        newExchange.setIn((Message) part);                                                }  else  {                                                        Message in = newExchange.getIn();                                                        in.setBody(part);                                                }                                                 return  createProcessorExchangePair(index++,                                                                getProcessors().iterator().next(), newExchange);                                        }:                  $_$      Claus Ibsen added a comment  - 15/Sep/10 08:01   Thanks Simon, I have fixed the windows issue. trunk: 997217          Claus Ibsen added a comment  - 15/Sep/10 08:01                    Thanks Simon, I have fixed the windows issue. trunk: 997217                $_$      Claus Ibsen added a comment  - 24/Apr/11 09:57   Closing all resolved tickets from 2010 or older          Claus Ibsen added a comment  - 24/Apr/11 09:57                    Closing all resolved tickets from 2010 or older                "
29,Testing headers in multiple messages ,Improvement,Claus Ibsen,Paul-Emmanuel Faidherbe,"

The need is something similar to expectedBodiesReceivedInAnyOrder applied to headers :
I know that a given endpoint will receive 3 messages in any order, and I need to test ONE header in each of these messages.
I wrote :
getMockEndpoint(""mock:zipSHP"").expectedHeaderReceived(""zippedFile"", ""001.zip"");
getMockEndpoint(""mock:zipSHP"").expectedHeaderReceived(""zippedFile"", ""002.zip"");
getMockEndpoint(""mock:zipSHP"").expectedHeaderReceived(""zippedFile"", ""003.zip"");
for the route :
for(""file://filesToBeZipped/"").to(""bean:my.bean.ZipperBean"").log(""Zipped : ..."");
The endpoint effectively received the three messages (the results of three ZIP operations) but the test failed saying that the first message header was ""003.zip"" and not the expected ""001.zip"". 

",19/Jan/12 10:20,06/Jul/12 11:46,Resolved,Minor,06/Jul/12 11:46,https://issues.apache.org/jira/browse/CAMEL-4919,"      Claus Ibsen added a comment  - 06/Jul/12 09:27   You need a expectedHeadersReceivedInAnyOrder(key, values...)          Claus Ibsen added a comment  - 06/Jul/12 09:27                    You need a expectedHeadersReceivedInAnyOrder(key, values...)                $_$      Claus Ibsen added a comment  - 06/Jul/12 11:46   There is now a new expectedHeaderValuesReceivedInAnyOrder on mock endpoint          Claus Ibsen added a comment  - 06/Jul/12 11:46                    There is now a new expectedHeaderValuesReceivedInAnyOrder on mock endpoint                "
30,DynamoDB: Execute query using secondary indexes,New Feature,Fabrizio Spataro,Fabrizio Spataro,"

Current code isn't able to indicate a secondary index name into a query operation

",03/Jan/18 14:09,03/Jan/18 14:31,Resolved,Major,03/Jan/18 14:31,https://issues.apache.org/jira/browse/CAMEL-12118,"      ASF GitHub Bot added a comment  - 03/Jan/18 14:19   Fabryprog opened a new pull request #2162: CAMEL-12118: DynamoDB: Execute query using secondary indexesURL: https://github.com/apache/camel/pull/2162----------------------------------------------------------------This is an automated message from the Apache Git Service.To respond to the message, please log on GitHub and use theURL above to go to the specific comment.For queries about this service, please contact Infrastructure at:users@infra.apache.org          ASF GitHub Bot added a comment  - 03/Jan/18 14:19                    Fabryprog opened a new pull request #2162:   CAMEL-12118  : DynamoDB: Execute query using secondary indexes URL:  https://github.com/apache/camel/pull/2162   ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message, please log on GitHub and use the URL above to go to the specific comment.  For queries about this service, please contact Infrastructure at: users@infra.apache.org                $_$      ASF GitHub Bot added a comment  - 03/Jan/18 14:19   GitHub user Fabryprog opened a pull request: https://github.com/apache/camel/pull/2162 CAMEL-12118: DynamoDB: Execute query using secondary indexesYou can merge this pull request into a Git repository by running:    $ git pull https://github.com/Fabryprog/camel CAMEL-12118Alternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/2162.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #2162commit 9d6ec90f45f0974956387a4a3b45522d14a447edAuthor: Fabrizio Spataro <fabrizio.spataro@...>Date:   2018-01-03T14:18:27Z CAMEL-12118: DynamoDB: Execute query using secondary indexes          ASF GitHub Bot added a comment  - 03/Jan/18 14:19                    GitHub user Fabryprog opened a pull request:       https://github.com/apache/camel/pull/2162         CAMEL-12118  : DynamoDB: Execute query using secondary indexes  You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/Fabryprog/camel    CAMEL-12118    Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/2162.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #2162   commit 9d6ec90f45f0974956387a4a3b45522d14a447ed Author: Fabrizio Spataro <fabrizio.spataro@...> Date:   2018-01-03T14:18:27Z        CAMEL-12118  : DynamoDB: Execute query using secondary indexes                 $_$      ASF GitHub Bot added a comment  - 03/Jan/18 14:31   oscerd commented on issue #2162: CAMEL-12118: DynamoDB: Execute query using secondary indexesURL: https://github.com/apache/camel/pull/2162#issuecomment-355025308   Thanks the PR has been merged to master. I fixed a little CS issue. Thanks.----------------------------------------------------------------This is an automated message from the Apache Git Service.To respond to the message, please log on GitHub and use theURL above to go to the specific comment.For queries about this service, please contact Infrastructure at:users@infra.apache.org          ASF GitHub Bot added a comment  - 03/Jan/18 14:31                    oscerd commented on issue #2162:   CAMEL-12118  : DynamoDB: Execute query using secondary indexes URL:  https://github.com/apache/camel/pull/2162#issuecomment-355025308      Thanks the PR has been merged to master. I fixed a little CS issue. Thanks.  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message, please log on GitHub and use the URL above to go to the specific comment.  For queries about this service, please contact Infrastructure at: users@infra.apache.org                $_$      ASF GitHub Bot added a comment  - 03/Jan/18 14:31   oscerd closed pull request #2162: CAMEL-12118: DynamoDB: Execute query using secondary indexesURL: https://github.com/apache/camel/pull/2162This is a PR merged from a forked repository.As GitHub hides the original diff on merge, it is displayed below forthe sake of provenance:As this is a foreign pull request (from a fork), the diff is suppliedbelow (as it won't show otherwise due to GitHub magic):diff --git a/components/camel-aws/src/main/docs/aws-ddb-component.adoc b/components/camel-aws/src/main/docs/aws-ddb-component.adocindex 19544e99f5a..cc3145b922b 100644— a/components/camel-aws/src/main/docs/aws-ddb-component.adoc+++ b/components/camel-aws/src/main/docs/aws-ddb-component.adoc@@ -105,6 +105,8 @@ returned.`CamelAwsDdbConsistentRead` `Boolean` If set to true, then a consistent read is issued, otherwise eventually consistent is used.+|`CamelAwsDdbIndexName` |`String` |If set will be used as Secondary Index for Query operation.+`CamelAwsDdbItem` `Map<String, AttributeValue>` A map of the attributes for the item, and must include the primary key values that define the item.diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.javaindex 6c2dbaeed4d..6ababab2fd6 100644— a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.java+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.java@@ -32,6 +32,8 @@     // String EXACT_COUNT = ""CamelAwsDdbExactCount"";     // Removed from DynamoDB v1 to v2     // String HASH_KEY_VALUE = ""CamelAwsDdbHashKeyValue"";+    // Added INDEX_NAME for querying secondary indexes+    String INDEX_NAME = ""CamelAwsDdbIndexName"";     String ITEM = ""CamelAwsDdbItem"";     String ITEMS = ""CamelAwsDdbItems"";     String ITEM_COUNT = ""CamelAwsDdbTableItemCount"";diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.javaindex 8719bfe5329..d64e9eeff6c 100644— a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.java+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.java@@ -34,7 +34,7 @@ public QueryCommand(AmazonDynamoDB ddbClient, DdbConfiguration configuration, Ex     @Override     public void execute() {tQueryResult result = ddbClient.query(new QueryRequest()+        QueryRequest query = new QueryRequest()                 .withTableName(determineTableName())                 .withAttributesToGet(determineAttributeNames())                 .withConsistentRead(determineConsistentRead())@@ -42,7 +42,14 @@ public void execute() {                 .withKeyConditions(determineKeyConditions())                 .withExclusiveStartKey(determineStartKey())                 .withLimit(determineLimit())t.withScanIndexForward(determineScanIndexForward()));+                .withScanIndexForward(determineScanIndexForward());+        +        // Check if we have set an Index Name+        if(exchange.getIn().getHeader(DdbConstants.INDEX_NAME, String.class) != null) {+            query.withIndexName(exchange.getIn().getHeader(DdbConstants.INDEX_NAME, String.class));+        }+        +        QueryResult result = ddbClient.query(query);         Map tmp = new HashMap<>();         tmp.put(DdbConstants.ITEMS, result.getItems());----------------------------------------------------------------This is an automated message from the Apache Git Service.To respond to the message, please log on GitHub and use theURL above to go to the specific comment.For queries about this service, please contact Infrastructure at:users@infra.apache.org          ASF GitHub Bot added a comment  - 03/Jan/18 14:31                    oscerd closed pull request #2162:   CAMEL-12118  : DynamoDB: Execute query using secondary indexes URL:  https://github.com/apache/camel/pull/2162   This is a PR merged from a forked repository. As GitHub hides the original diff on merge, it is displayed below for the sake of provenance:  As this is a foreign pull request (from a fork), the diff is supplied below (as it won't show otherwise due to GitHub magic):  diff --git a/components/camel-aws/src/main/docs/aws-ddb-component.adoc b/components/camel-aws/src/main/docs/aws-ddb-component.adoc index 19544e99f5a..cc3145b922b 100644 — a/components/camel-aws/src/main/docs/aws-ddb-component.adoc +++ b/components/camel-aws/src/main/docs/aws-ddb-component.adoc @@ -105,6 +105,8 @@ returned.      `CamelAwsDdbConsistentRead`   `Boolean`   If set to true, then a consistent read is issued, otherwise eventually  consistent is used.      +|`CamelAwsDdbIndexName` |`String` |If set will be used as Secondary Index for Query operation. +      `CamelAwsDdbItem`   `Map<String, AttributeValue>`   A map of the attributes for the item, and must include the primary key  values that define the item.      diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.java index 6c2dbaeed4d..6ababab2fd6 100644 — a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.java +++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/DdbConstants.java @@ -32,6 +32,8 @@      // String EXACT_COUNT = ""CamelAwsDdbExactCount"";      // Removed from DynamoDB v1 to v2      // String HASH_KEY_VALUE = ""CamelAwsDdbHashKeyValue""; +    // Added INDEX_NAME for querying secondary indexes +    String INDEX_NAME = ""CamelAwsDdbIndexName"";      String ITEM = ""CamelAwsDdbItem"";      String ITEMS = ""CamelAwsDdbItems"";      String ITEM_COUNT = ""CamelAwsDdbTableItemCount""; diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.java index 8719bfe5329..d64e9eeff6c 100644 — a/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.java +++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/ddb/QueryCommand.java @@ -34,7 +34,7 @@ public QueryCommand(AmazonDynamoDB ddbClient, DdbConfiguration configuration, Ex       @Override      public void execute() {  t QueryResult result = ddbClient.query(new QueryRequest() +        QueryRequest query = new QueryRequest()                  .withTableName(determineTableName())                  .withAttributesToGet(determineAttributeNames())                  .withConsistentRead(determineConsistentRead()) @@ -42,7 +42,14 @@ public void execute() {                  .withKeyConditions(determineKeyConditions())                  .withExclusiveStartKey(determineStartKey())                  .withLimit(determineLimit()) t .withScanIndexForward(determineScanIndexForward())); +                .withScanIndexForward(determineScanIndexForward()); +         +        // Check if we have set an Index Name +        if(exchange.getIn().getHeader(DdbConstants.INDEX_NAME, String.class) != null) {+            query.withIndexName(exchange.getIn().getHeader(DdbConstants.INDEX_NAME, String.class));+        } +         +        QueryResult result = ddbClient.query(query);             Map tmp = new HashMap<>();          tmp.put(DdbConstants.ITEMS, result.getItems());  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message, please log on GitHub and use the URL above to go to the specific comment.  For queries about this service, please contact Infrastructure at: users@infra.apache.org                $_$      ASF GitHub Bot added a comment  - 03/Jan/18 14:31   Github user oscerd closed the pull request at: https://github.com/apache/camel/pull/2162          ASF GitHub Bot added a comment  - 03/Jan/18 14:31                    Github user oscerd closed the pull request at:       https://github.com/apache/camel/pull/2162                 "
31,Google Mail Component,New Feature,Jonathan Anstey,Jonathan Anstey,"

Looking at creating a component for accessing Google's mail API https://developers.google.com/gmail/api/v1/reference/

",02/Dec/14 20:42,03/Dec/14 19:13,Resolved,Major,03/Dec/14 19:13,https://issues.apache.org/jira/browse/CAMEL-8110,      Jonathan Anstey added a comment  - 02/Dec/14 21:09   Added here: http://git-wip-us.apache.org/repos/asf/camel/commit/3c6769dbStill need to do up some docs.          Jonathan Anstey added a comment  - 02/Dec/14 21:09                    Added here:  http://git-wip-us.apache.org/repos/asf/camel/commit/3c6769db   Still need to do up some docs.                
32,Log messages that do not match with their method function,Improvement,Claus Ibsen,Zhenhao Li,"

There are some possible copy and paste errors in the log messages (The logging statement was copied from an old place to a new place, but the message wasn't changed to adapt to the function of the new place) which may cause confusion when operators are reading the log messages. 
 
Here is a list of the related logging statements:
 
 
1. log.debug(""Created FTPClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}"" + "", receiveDataSocketBufferSize: {}, sendDataSocketBufferSize: {}]: {}"";
      Callsites:

org.apache.camel.component.file.remote.FTPEndpoint.createRemoteFileOperations,
org.apache.camel.component.file.remote.FtpsEndpoint.createRemoteFileOperations,

 
2. LOG.debug(""Adding to producer service pool with key: {} for producer: {}"", endpoint, answer);
      Callsites:

org.apache.camel.impl.ProducerCache.doGetProducer,


org.apache.camel.impl.ConsumerCache.doGetPollingConsumer

 
3. LOG.debug(""Trying to update the post {} with id {}"", exchange.getIn().getBody(), this.getConfiguration().getId());
      Callsites:

org.apache.camel.component.wordpress.producer.WordpressPostProducer.processUpdate,


org.apache.camel.component.wordpress.producer.WordpressUserProducer.processUpdate

 
4. LOG.error(""Create a specific pod require specify a namespace name"");
      Callsites:

org.apache.camel.component.kubernetes.pods.KubernetesPodsProducer.doCreatePod,


org.apache.camel.component.kubernetes.deployments.KubernetesDeploymentsProducer.doCreateDeployment

 
5. LOG.debug(""Channel closed but no message received from address: {}"", producer.getConfiguration().getAddress());
      Callsites:

org.apache.camel.component.netty.handlers.ClientChannelHandler.channelClosed,


org.apache.camel.component.netty4.handlers.ClientChannelHandler.channelInactive

 
 
6. LOG.trace(""Delete Broker command returned the error code {}"", ase.getErrorCode());
      Callsites:

org.apache.camel.component.aws.mq.MQProducer.rebootBroker,


org.apache.camel.component.aws.mq.MQProducer.deleteBroker

 
7. LOG.debug(""Stopping JmsReplyManager: {} from processing replies from: {}"", replyManager, endpoint.getReplyTo() != null ? endpoint.getReplyTo() : ""temporary queue"");
      Callsites:

org.apache.camel.component.rabbitmq.RabbitMQProducer.unInitReplyManager,


org.apache.camel.component.jms.JmsProducer.unInitReplyManager

 
8. logger.warn(""Error scanning JAR for custom Camel components"", e);
      Callsites:

org.apache.camel.catalog.nexus.ComponentCatalogNexusRepository.addCustomCamelComponentsFromArtifact,


org.apache.camel.catalog.nexus.*ConnectorCatalogNexusRepository.*addCustomCamelConnectorFromArtifact

 
9. LOGGER.debug(""Subscribe to events for queue: {}"", resourceName);
      Callsites:

org.apache.camel.component.atomix.client.value.AtomixValueConsumer.doStart,


org.apache.camel.component.atomix.client.queue.AtomixQueueConsumer.doStart

 
10. LOG.warn(""TimeoutEvent received at Sip Subscription Listener"");
      Callsites:

org.apache.camel.component.sip.listener.SipSubscriptionListener.processTimeout,


org.apache.camel.component.sip.listener.SipPresenceAgentListener.processTimeout

 
11. LOGGER.debug(""Executing Docker Kill Container Request"");
      Callsites:

org.apache.camel.component.docker.producer.DockerProducer.executeStopContainerRequest,


org.apache.camel.component.docker.producer.DockerProducer.executeKillContainerRequest

 
12. LOG.trace(""Rename Droplet {} : [{}] "", dropletId, action);
      Callsites:

org.apache.camel.component.digitalocean.producer.DigitalOceanDropletsProducer.change.DropletKernel,


org.apache.camel.component.digitalocean.producer.DigitalOceanDropletsProducer.renameDroplet

 
 

",13/Jul/18 14:37,15/Jul/18 07:04,Resolved,Minor,15/Jul/18 07:04,https://issues.apache.org/jira/browse/CAMEL-12650,"      ASF GitHub Bot added a comment  - 13/Jul/18 15:37   lzh3636 opened a new pull request #2426: CAMEL-12650 Log messages that do not match with their method functionURL: https://github.com/apache/camel/pull/2426   The description of the issue: https://issues.apache.org/jira/browse/CAMEL-12650   There are some possible copy and paste errors in the log messages (The logging statement was copied from an old place to a new place, but the message wasn't changed to adapt to the function of the new place. The issue report shows the pairs of original places where the logging statements might be copied from, and the new places that copied to) which may cause confusion when operators are reading the log messages.  I changed the logging messages to make them more adaptive----------------------------------------------------------------This is an automated message from the Apache Git Service.To respond to the message, please log on GitHub and use theURL above to go to the specific comment.For queries about this service, please contact Infrastructure at:users@infra.apache.org          ASF GitHub Bot added a comment  - 13/Jul/18 15:37                    lzh3636 opened a new pull request #2426:   CAMEL-12650   Log messages that do not match with their method function URL:  https://github.com/apache/camel/pull/2426      The description of the issue:     https://issues.apache.org/jira/browse/CAMEL-12650      There are some possible copy and paste errors in the log messages (The logging statement was copied from an old place to a new place, but the message wasn't changed to adapt to the function of the new place. The issue report shows the pairs of original places where the logging statements might be copied from, and the new places that copied to) which may cause confusion when operators are reading the log messages.  I changed the logging messages to make them more adaptive  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message, please log on GitHub and use the URL above to go to the specific comment.  For queries about this service, please contact Infrastructure at: users@infra.apache.org                $_$      ASF GitHub Bot added a comment  - 13/Jul/18 15:37   GitHub user lzh3636 opened a pull request: https://github.com/apache/camel/pull/2426 CAMEL-12650 Log messages that do not match with their method function    The description of the issue: https://issues.apache.org/jira/browse/CAMEL-12650    There are some possible copy and paste errors in the log messages (The logging statement was copied from an old place to a new place, but the message wasn't changed to adapt to the function of the new place. The issue report shows the pairs of original places where the logging statements might be copied from, and the new places that copied to) which may cause confusion when operators are reading the log messages.  I changed the logging messages to make them more adaptiveYou can merge this pull request into a Git repository by running:    $ git pull https://github.com/lzh3636/camel CAMEL-12650Alternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/2426.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #2426commit c75363d046e131f56c168717edc18f12c088382cAuthor: zhenhaoli <lizi422@...>Date:   2018-07-13T15:35:48Z CAMEL-12650 Log messages that do not match with their method function          ASF GitHub Bot added a comment  - 13/Jul/18 15:37                    GitHub user lzh3636 opened a pull request:       https://github.com/apache/camel/pull/2426         CAMEL-12650   Log messages that do not match with their method function      The description of the issue:      https://issues.apache.org/jira/browse/CAMEL-12650       There are some possible copy and paste errors in the log messages (The logging statement was copied from an old place to a new place, but the message wasn't changed to adapt to the function of the new place. The issue report shows the pairs of original places where the logging statements might be copied from, and the new places that copied to) which may cause confusion when operators are reading the log messages.  I changed the logging messages to make them more adaptive  You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/lzh3636/camel    CAMEL-12650    Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/2426.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #2426   commit c75363d046e131f56c168717edc18f12c088382c Author: zhenhaoli <lizi422@...> Date:   2018-07-13T15:35:48Z        CAMEL-12650   Log messages that do not match with their method function                 $_$      ASF GitHub Bot added a comment  - 15/Jul/18 06:57   davsclaus closed pull request #2426: CAMEL-12650 Log messages that do not match with their method functionURL: https://github.com/apache/camel/pull/2426This is a PR merged from a forked repository.As GitHub hides the original diff on merge, it is displayed below forthe sake of provenance:As this is a foreign pull request (from a fork), the diff is suppliedbelow (as it won't show otherwise due to GitHub magic):diff --git a/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java b/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.javaindex 7864bf9c532..a523a09b0ce 100644— a/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java+++ b/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java@@ -177,7 +177,7 @@ protected synchronized PollingConsumer doGetPollingConsumer(Endpoint endpoint, b                 throw new FailedToCreateConsumerException(endpoint, e);             }             if (pooled && answer instanceof ServicePoolAware) {tLOG.debug(""Adding to producer service pool with key: {} for producer: {}"", endpoint, answer);+                LOG.debug(""Adding to consumer service pool with key: {} for consumer: {}"", endpoint, answer);                 answer = pool.addAndAcquire(endpoint, answer);             } else {                 boolean singleton = false;diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.javaindex ecb759eed7e..5c067bf5dec 100644tttttttta/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.java+++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.java@@ -56,7 +56,7 @@ protected void doStart() throws Exception {             .join();tttttttLOGGER.debug(""Subscribe to events for queue: {}"", resourceName);+        LOGGER.debug(""Subscribe to events for value: {}"", resourceName);         this.listeners.add(this.value.onChange(this::onEvent).join());     }diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.javaindex 01517704163..c217c14a578 100644— a/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.java+++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.java@@ -177,7 +177,7 @@ private void rebootBroker(AmazonMQ mqClient, Exchange exchange) {         try {             result = mqClient.rebootBroker(request);         } catch (AmazonServiceException ase) {tLOG.trace(""Delete Broker command returned the error code {}"", ase.getErrorCode());+            LOG.trace(""Reboot Broker command returned the error code {}"", ase.getErrorCode());             throw ase;         }         Message message = getMessageForResponse(exchange);diff --git a/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.java b/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.javaindex 3c51fea0ef3..555072687cb 100644tttttttta/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.java+++ b/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.java@@ -330,7 +330,7 @@ private void changeDropletKernel(Exchange exchange) throws Exception {         }tttttt         Action action = getEndpoint().getDigitalOceanClient().changeDropletKernel(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.KERNEL_ID, Integer.class));tLOG.trace(""Rename Droplet {} : [{}] "", dropletId, action);+        LOG.trace(""Change Droplet {} : [{}] "", dropletId, action);         exchange.getOut().setBody(action);     }diff --git a/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.java b/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.javaindex e76cee0a932..097f4be865a 100644— a/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.java+++ b/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.java@@ -1019,7 +1019,7 @@ private StartContainerCmd executeStartContainerRequest(DockerClient client, Mess      */     private StopContainerCmd executeStopContainerRequest(DockerClient client, Message message) {tLOGGER.debug(""Executing Docker Kill Container Request"");+        LOGGER.debug(""Executing Docker Stop Container Request"");         String containerId = DockerHelper.getProperty(DockerConstants.DOCKER_CONTAINER_ID, configuration, message, String.class);diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.javaindex 144be586183..8200e45713c 100644— a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java@@ -197,7 +197,7 @@ protected FTPClient createFtpClient() throws Exception {         }         if (log.isDebugEnabled()) {tlog.debug(""Created FTPClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}""+            log.debug(""Created FTPSClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}""                             + "", receiveDataSocketBufferSize: {}, sendDataSocketBufferSize: {}]: {}"",                     new Object[]{client.getConnectTimeout(), getSoTimeout(), dataTimeout, client.getBufferSize(),                             client.getReceiveDataSocketBufferSize(), client.getSendDataSocketBufferSize(), client});diff --git a/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.javaindex 84bb513ffd4..28f406f34f1 100644tttttttta/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java+++ b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java@@ -149,11 +149,11 @@ protected void doCreateDeployment(Exchange exchange, String operation) throws Ex         DeploymentSpec deSpec = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_SPEC, DeploymentSpec.class);         if (ObjectHelper.isEmpty(deploymentName)) {             LOG.error(""Create a specific Deployment require specify a Deployment name"");-            throw new IllegalArgumentException(""Create a specific pod require specify a pod name"");+            throw new IllegalArgumentException(""Create a specific Deployment require specify a pod name"");         }         if (ObjectHelper.isEmpty(namespaceName)) {-            LOG.error(""Create a specific pod require specify a namespace name"");-            throw new IllegalArgumentException(""Create a specific pod require specify a namespace name"");+            LOG.error(""Create a specific Deployment require specify a namespace name"");+            throw new IllegalArgumentException(""Create a specific Deployment require specify a namespace name"");         }         if (ObjectHelper.isEmpty(deSpec)) {             LOG.error(""Create a specific Deployment require specify a Deployment spec bean"");diff --git a/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.java b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.javaindex 77f498ecb76..f81fc1c8437 100644ttta/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.java+++ b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.java@@ -126,7 +126,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {                 // and could not return a response. We should count down to stop waiting for a response                 String address = configuration.getAddress();                 if (LOG.isDebugEnabled()) {tttttttLOG.debug(""Channel closed but no message received from address: {}"", address);+                    LOG.debug(""Channel is inactive but no message received from address: {}"", address);                 }                 // don't fail the exchange if we actually specify to disconnect                 if (!configuration.isDisconnect()) {diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.javaindex a28729aebaa..024daf65585 100644tttttttta/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java+++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java@@ -352,7 +352,7 @@ protected void unInitReplyManager() {         try {             if (replyManager != null) {                 if (log.isDebugEnabled()) {tttttttlog.debug(""Stopping JmsReplyManager: {} from processing replies from: {}"", replyManager,+                    log.debug(""Stopping RabbitMQReplyManager: {} from processing replies from: {}"", replyManager,                                     getEndpoint().getReplyTo() != null ? getEndpoint().getReplyTo() : ""temporary queue"");                 }                 ServiceHelper.stopService(replyManager);diff --git a/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java b/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.javaindex 75a5464d173..22648f22613 100644tttttttta/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java+++ b/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java@@ -189,7 +189,7 @@ public synchronized void processResponse(ResponseEvent responseReceivedEvent) {tttttt     public void processTimeout(javax.sip.TimeoutEvent timeoutEvent) {         if (LOG.isWarnEnabled()) {-            LOG.warn(""TimeoutEvent received at Sip Subscription Listener"");+            LOG.warn(""TimeoutEvent received at Sip Presence Agent Listener"");         }     }diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.javaindex b6426edcf2d..7c7f9f9e991 100644— a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.java+++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.java@@ -37,7 +37,7 @@ protected User processDelete(Exchange exchange) {     }     protected User processUpdate(Exchange exchange) {tLOG.debug(""Trying to update the post {} with id {}"", exchange.getIn().getBody(), this.getConfiguration().getId());+        LOG.debug(""Trying to update the user {} with id {}"", exchange.getIn().getBody(), this.getConfiguration().getId());         return serviceUsers.update(getConfiguration().getId(), exchange.getIn().getBody(User.class));     }diff --git a/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.java b/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.javaindex 5cf1e031753..98630d4b176 100644— a/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.java+++ b/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.java@@ -125,7 +125,7 @@ private void addCustomCamelConnectorFromArtifact(NexusArtifactDto dto, URL jarUr                 addConnector(dto, name, scheme, javaType, description, csb.toString(), json[0], json[1], json[2]);             }         } catch (IOException e) {-            logger.warn(""Error scanning JAR for custom Camel components"", e);+            logger.warn(""Error scanning JAR for custom Camel connectors"", e);         }     }----------------------------------------------------------------This is an automated message from the Apache Git Service.To respond to the message, please log on GitHub and use theURL above to go to the specific comment.For queries about this service, please contact Infrastructure at:users@infra.apache.org          ASF GitHub Bot added a comment  - 15/Jul/18 06:57                    davsclaus closed pull request #2426:   CAMEL-12650   Log messages that do not match with their method function URL:  https://github.com/apache/camel/pull/2426   This is a PR merged from a forked repository. As GitHub hides the original diff on merge, it is displayed below for the sake of provenance:  As this is a foreign pull request (from a fork), the diff is supplied below (as it won't show otherwise due to GitHub magic):  diff --git a/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java b/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java index 7864bf9c532..a523a09b0ce 100644 — a/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java +++ b/camel-core/src/main/java/org/apache/camel/impl/ConsumerCache.java @@ -177,7 +177,7 @@ protected synchronized PollingConsumer doGetPollingConsumer(Endpoint endpoint, b                  throw new FailedToCreateConsumerException(endpoint, e);              }              if (pooled && answer instanceof ServicePoolAware) {  t LOG.debug(""Adding to producer service pool with key: {} for producer: {}"", endpoint, answer); +                LOG.debug(""Adding to consumer service pool with key: {} for consumer: {}"", endpoint, answer);                  answer = pool.addAndAcquire(endpoint, answer);              } else {                  boolean singleton = false; diff --git a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.java b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.java index ecb759eed7e..5c067bf5dec 100644t tt tt ttt a/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.java +++ b/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/client/value/AtomixValueConsumer.java @@ -56,7 +56,7 @@ protected void doStart() throws Exception {              .join(); tt tt t t   t LOGGER.debug(""Subscribe to events for queue: {}"", resourceName); +        LOGGER.debug(""Subscribe to events for value: {}"", resourceName);          this.listeners.add(this.value.onChange(this::onEvent).join());      }   diff --git a/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.java b/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.java index 01517704163..c217c14a578 100644 — a/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.java +++ b/components/camel-aws/src/main/java/org/apache/camel/component/aws/mq/MQProducer.java @@ -177,7 +177,7 @@ private void rebootBroker(AmazonMQ mqClient, Exchange exchange) {          try  {             result = mqClient.rebootBroker(request);         }  catch (AmazonServiceException ase) {  t LOG.trace(""Delete Broker command returned the error code {}"", ase.getErrorCode()); +            LOG.trace(""Reboot Broker command returned the error code {}"", ase.getErrorCode());              throw ase;          }          Message message = getMessageForResponse(exchange); diff --git a/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.java b/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.java index 3c51fea0ef3..555072687cb 100644t tt tt ttt a/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.java +++ b/components/camel-digitalocean/src/main/java/org/apache/camel/component/digitalocean/producer/DigitalOceanDropletsProducer.java @@ -330,7 +330,7 @@ private void changeDropletKernel(Exchange exchange) throws Exception {          } tt tt t t            Action action = getEndpoint().getDigitalOceanClient().changeDropletKernel(dropletId, exchange.getIn().getHeader(DigitalOceanHeaders.KERNEL_ID, Integer.class));  t LOG.trace(""Rename Droplet {} :  [{}]  "", dropletId, action); +        LOG.trace(""Change Droplet {} :  [{}]  "", dropletId, action);          exchange.getOut().setBody(action);      }   diff --git a/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.java b/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.java index e76cee0a932..097f4be865a 100644 — a/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.java +++ b/components/camel-docker/src/main/java/org/apache/camel/component/docker/producer/DockerProducer.java @@ -1019,7 +1019,7 @@ private StartContainerCmd executeStartContainerRequest(DockerClient client, Mess       */      private StopContainerCmd executeStopContainerRequest(DockerClient client, Message message) {  t LOGGER.debug(""Executing Docker Kill Container Request""); +        LOGGER.debug(""Executing Docker Stop Container Request"");            String containerId = DockerHelper.getProperty(DockerConstants.DOCKER_CONTAINER_ID, configuration, message, String.class);  diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java index 144be586183..8200e45713c 100644 — a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java +++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpsEndpoint.java @@ -197,7 +197,7 @@ protected FTPClient createFtpClient() throws Exception {          }           if (log.isDebugEnabled()) {  t log.debug(""Created FTPClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}"" +            log.debug(""Created FTPSClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}""                              + "", receiveDataSocketBufferSize: {}, sendDataSocketBufferSize: {}]: {}"",                      new Object[]{client.getConnectTimeout(), getSoTimeout(), dataTimeout, client.getBufferSize(),                             client.getReceiveDataSocketBufferSize(), client.getSendDataSocketBufferSize(), client} ); diff --git a/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java index 84bb513ffd4..28f406f34f1 100644 t tt tt ttt a/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java +++ b/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/deployments/KubernetesDeploymentsProducer.java @@ -149,11 +149,11 @@ protected void doCreateDeployment(Exchange exchange, String operation) throws Ex          DeploymentSpec deSpec = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_SPEC, DeploymentSpec.class);          if (ObjectHelper.isEmpty(deploymentName)) {             LOG.error(""Create a specific Deployment require specify a Deployment name"");-            throw new IllegalArgumentException(""Create a specific pod require specify a pod name"");+            throw new IllegalArgumentException(""Create a specific Deployment require specify a pod name"");         }          if (ObjectHelper.isEmpty(namespaceName))  {-            LOG.error(""Create a specific pod require specify a namespace name"");-            throw new IllegalArgumentException(""Create a specific pod require specify a namespace name"");+            LOG.error(""Create a specific Deployment require specify a namespace name"");+            throw new IllegalArgumentException(""Create a specific Deployment require specify a namespace name"");         }          if (ObjectHelper.isEmpty(deSpec)) {              LOG.error(""Create a specific Deployment require specify a Deployment spec bean""); diff --git a/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.java b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.java index 77f498ecb76..f81fc1c8437 100644  ttt a/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.java +++ b/components/camel-netty4/src/main/java/org/apache/camel/component/netty4/handlers/ClientChannelHandler.java @@ -126,7 +126,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {                  // and could not return a response. We should count down to stop waiting for a response                  String address = configuration.getAddress();                  if (LOG.isDebugEnabled()) { tt tt t t t LOG.debug(""Channel closed but no message received from address: {}"", address); +                    LOG.debug(""Channel is inactive but no message received from address: {}"", address);                  }                  // don't fail the exchange if we actually specify to disconnect                  if (!configuration.isDisconnect()) { diff --git a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java index a28729aebaa..024daf65585 100644t tt tt ttt a/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java +++ b/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java @@ -352,7 +352,7 @@ protected void unInitReplyManager() {          try {              if (replyManager != null) {                  if (log.isDebugEnabled()) { tt tt t t t log.debug(""Stopping JmsReplyManager: {} from processing replies from: {}"", replyManager, +                    log.debug(""Stopping RabbitMQReplyManager: {} from processing replies from: {}"", replyManager,                                      getEndpoint().getReplyTo() != null ? getEndpoint().getReplyTo() : ""temporary queue"");                  }                  ServiceHelper.stopService(replyManager); diff --git a/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java b/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java index 75a5464d173..22648f22613 100644t tt tt ttt a/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java +++ b/components/camel-sip/src/main/java/org/apache/camel/component/sip/listener/SipPresenceAgentListener.java @@ -189,7 +189,7 @@ public synchronized void processResponse(ResponseEvent responseReceivedEvent) { tt tt t t        public void processTimeout(javax.sip.TimeoutEvent timeoutEvent) {          if (LOG.isWarnEnabled())  {-            LOG.warn(""TimeoutEvent received at Sip Subscription Listener"");+            LOG.warn(""TimeoutEvent received at Sip Presence Agent Listener"");         }      }  diff --git a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.java b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.java index b6426edcf2d..7c7f9f9e991 100644 — a/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.java +++ b/components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/producer/WordpressUserProducer.java @@ -37,7 +37,7 @@ protected User processDelete(Exchange exchange) {      }       protected User processUpdate(Exchange exchange) {  t LOG.debug(""Trying to update the post {} with id {}"", exchange.getIn().getBody(), this.getConfiguration().getId()); +        LOG.debug(""Trying to update the user {} with id {}"", exchange.getIn().getBody(), this.getConfiguration().getId());          return serviceUsers.update(getConfiguration().getId(), exchange.getIn().getBody(User.class));      }   diff --git a/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.java b/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.java index 5cf1e031753..98630d4b176 100644 — a/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.java +++ b/platforms/camel-catalog-nexus/src/main/java/org/apache/camel/catalog/nexus/ConnectorCatalogNexusRepository.java @@ -125,7 +125,7 @@ private void addCustomCamelConnectorFromArtifact(NexusArtifactDto dto, URL jarUr                  addConnector(dto, name, scheme, javaType, description, csb.toString(), json [0] , json [1] , json [2] );              }          } catch (IOException e)  {-            logger.warn(""Error scanning JAR for custom Camel components"", e);+            logger.warn(""Error scanning JAR for custom Camel connectors"", e);         }      }  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message, please log on GitHub and use the URL above to go to the specific comment.  For queries about this service, please contact Infrastructure at: users@infra.apache.org                $_$      ASF GitHub Bot added a comment  - 15/Jul/18 06:57   Github user davsclaus closed the pull request at: https://github.com/apache/camel/pull/2426          ASF GitHub Bot added a comment  - 15/Jul/18 06:57                    Github user davsclaus closed the pull request at:       https://github.com/apache/camel/pull/2426                 $_$      Claus Ibsen added a comment  - 15/Jul/18 07:04   Thanks for spotting and provided the PR          Claus Ibsen added a comment  - 15/Jul/18 07:04                    Thanks for spotting and provided the PR                "
33,Custom AsyncHttpClientConfig not used in WsEndpoint,Bug,Andrea Cosentino,Thomas Günter,"

Provided custom AsyncHttpClientConfig is not used by WsEndpoint.java.
Current implementation: 
WsEndpoint.java:109
    protected AsyncHttpClient createClient(AsyncHttpClientConfig config) {
        AsyncHttpClient client;
        if (config == null) {
            config = new DefaultAsyncHttpClientConfig.Builder().build();
            client = new DefaultAsyncHttpClient(config);
        } else {
            client = new DefaultAsyncHttpClient();
        }
        return client;
    }


Expected implementation:
WsEndpoint.java:109
    protected AsyncHttpClient createClient(AsyncHttpClientConfig config) {
        AsyncHttpClient client;
        if (config == null) {
            config = new DefaultAsyncHttpClientConfig.Builder().build();
            client = new DefaultAsyncHttpClient(config);
        } else {
            client = new DefaultAsyncHttpClient(config);
        }
        return client;
    }



",22/Dec/16 10:28,22/Dec/16 13:09,Resolved,Major,22/Dec/16 13:02,https://issues.apache.org/jira/browse/CAMEL-10640,"      Claus Ibsen added a comment  - 22/Dec/16 11:11   Thanks do you want to provide this patch on github as a github PR?http://camel.apache.org/contributing          Claus Ibsen added a comment  - 22/Dec/16 11:11                    Thanks do you want to provide this patch on github as a github PR?  http://camel.apache.org/contributing                 $_$      ASF GitHub Bot added a comment  - 22/Dec/16 12:19   GitHub user tomguenter opened a pull request: https://github.com/apache/camel/pull/1364 CAMEL-10640 Custom AsyncHttpClientConfig not used in WsEndpointYou can merge this pull request into a Git repository by running:    $ git pull https://github.com/apache/camel camel-2.18.xAlternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/1364.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #1364commit 2f5fab9c4f725505cee9b12de98cf46640924ce6Author: Gregor Zurowski <gregor@zurowski.org>Date:   2016-10-03T13:58:29Z [maven-release-plugin] prepare release camel-2.18.0commit 54a02453f4611b47daea7f270623f2d4e974750dAuthor: Gregor Zurowski <gregor@zurowski.org>Date:   2016-10-03T13:59:42Z [maven-release-plugin] prepare for next development iterationcommit 244eb03876bb4e7d95b04b4f4ae48322e47e3bb4Author: Franz Forsthofer <franz.forsthofer@sap.com>Date:   2016-10-04T11:59:42Z CAMEL-10368: Unused deflater in ZipDataFormatcommit da8694f8c5392881ac5ab49c37a7947451bb65afAuthor: Gregor Zurowski <gregor@zurowski.org>Date:   2016-10-04T22:28:22Z [maven-release-plugin] prepare release camel-2.18.0commit e6d985d2f997b40711073e011849dc8498c225d7Author: Gregor Zurowski <gregor@zurowski.org>Date:   2016-10-04T22:28:59Z [maven-release-plugin] prepare for next development iterationcommit 1df40f5f5097eca6c208cdef24be9a75dbcb2510Author: Stephan Siano <stephan.siano@sap.com>Date:   2016-10-04T14:25:20Z CAMEL-10370: Conversion to CxfPayload throws Exception for Non-XML payloadcommit ea4b27fbe1ff44d546c018c1436cab701a8705cfAuthor: Nicola Ferraro <ni.ferraro@gmail.com>Date:   2016-10-06T09:11:59Z CAMEL-10358: do not clear the registry too earlycommit ef88e60af5dab348c779216b008c5dfe7730cc06Author: Claus Ibsen <davsclaus@apache.org>Date:   2016-10-05T15:49:18Z CAMEL-10366: Include input/output/deprecated in the spring model json schema files so they are similar to EIP model files. Thanks to Aurelien Pupier for reporting this.commit 63439e174e2fbc7b89994e5df3a3723b02c55c58Author: Claus Ibsen <davsclaus@apache.org>Date:   2016-10-05T15:53:41Z    Fixed syntax on endpoint for component docs in camel-chronicelecommit f374df8d6704d2f121db92d0814531e2ad979205Author: Claus Ibsen <davsclaus@apache.org>Date:   2016-10-05T16:11:32Z    Fixed camel-chronoicle component docs and schemacommit 17c3407fef17f29aeaef0f578e1fc6ca3427fa9cAuthor: Robert Gemmell <robbie@apache.org>Date:   2016-10-04T11:20:28Z CAMEL-10367: remove stale dependency and version prop, fix a couple typoscommit 3bc4cf5a6e146da6df5233a5ca8eb32f1e180a64Author: Christian Mueller <cmueller@apache.org>Date:   2016-10-06T05:47:35Z    added the missing license and notice file to the camel-cm-sms componentcommit f3eff6d82dcf670187ed7ddc4cb07e917b35dd41Author: Christian Mueller <cmueller@apache.org>Date:   2016-10-06T05:54:38Z    added the missing license and notice file to the camel-servicenow componentcommit 6081e236162a4d908b412080e608407361bc544cAuthor: Christian Mueller <cmueller@apache.org>Date:   2016-10-06T05:57:37Z    added the missing license and notice file to the camel-telegram componentcommit 461d4dd69ce2591487df6db1d27416558ae53c83Author: Claus Ibsen <davsclaus@apache.org>Date:   2016-10-07T13:40:30Z CAMEL-10372: Fixed camel-stream component doccommit 20cf933edde90b48ee371cf89aaacb2833ad8a8bAuthor: Gregor Zurowski <gregor@zurowski.org>Date:   2016-10-09T20:15:46Z    Update schema files with release 2.18.0 references    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>commit ac002c88d28faec0b59d52a8b2427c23f1540a5aAuthor: Michael Lu00FCck <michael.lueck@hm-ag.de>Date:   2016-10-04T09:18:04Z    added method to check for key existencecommit 201aeb22f7a8eea16690028f2b0969a452ca6becAuthor: Michael Lu00FCck <michael.lueck@hm-ag.de>Date:   2016-10-05T13:22:51Z    added null check before trying to call containsKey (prevent NPE)commit 9916ee431192e1215a87900b5c5c622822d2e98cAuthor: Andrea Cosentino <ancosen@gmail.com>Date:   2016-10-11T07:54:45Z    Fixed CScommit f655c94110ae14a3db5b2ce6409684deaa619846Author: lburgazzoli <lburgazzoli@gmail.com>Date:   2016-09-29T17:25:18Z CAMEL-10357: camel-servicenow: add per release modelcommit fa1789a36ea81cc03394e2e8806d8d4e8d2197a2Author: lburgazzoli <lburgazzoli@gmail.com>Date:   2016-10-10T16:39:44Z CAMEL-10378: Upgrade log4j2 to v2.7commit 37a12df6a3d6780495b249b959a25966b62afb69Author: Jonathan Anstey <janstey@gmail.com>Date:   2016-10-11T19:09:15Z CAMEL-10381 - fix NPE from component configurationcommit 7a1ee6bedc1c3572e7abdb0262f08d3435e5d293Author: Jonathan Anstey <janstey@gmail.com>Date:   2016-10-11T21:55:12Z    remove non spring boot compatible starterscommit 645d024b442bb130eaebbff41a494ac313bc6868Author: Jonathan Anstey <janstey@gmail.com>Date:   2016-10-11T22:17:27Z CAMEL-10381 - fix NPE from component configurationcommit fbcaded8349754e574d6900dca863bbdec71b6c9Author: Jonathan Anstey <janstey@gmail.com>Date:   2016-10-11T22:17:58Z    add missed test casecommit 6d663971259650b626303ca30e77004abcdd3b0aAuthor: Jonathan Anstey <janstey@gmail.com>Date:   2016-10-12T02:02:37Z CAMEL-10381 - fix NPE from calendar component configurationcommit 8de429e1236f1f2fb24098a924eb651ede85adc8Author: Jonathan Anstey <janstey@gmail.com>Date:   2016-10-12T02:06:18Z    fix test errorcommit b15c2f5d62eb0285c5d48b9e9199e48abce365aaAuthor: Jonathan Anstey <janstey@gmail.com>Date:   2016-10-12T02:07:48Z    fix CScommit 8965cad85337014340b2eb9a44db386d40669c30Author: lburgazzoli <lburgazzoli@gmail.com>Date:   2016-10-11T15:42:34Z CAMEL-10379: Improved component descriptioncommit 467ded8f388e85df728927d0b0c3f7fb87fb89d4Author: James Netherton <jamesnetherton@gmail.com>Date:   2016-10-12T08:22:15Z    Minor improvements to camel-zipkin docs          ASF GitHub Bot added a comment  - 22/Dec/16 12:19                    GitHub user tomguenter opened a pull request:       https://github.com/apache/camel/pull/1364         CAMEL-10640   Custom AsyncHttpClientConfig not used in WsEndpoint  You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/apache/camel  camel-2.18.x  Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/1364.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #1364   commit 2f5fab9c4f725505cee9b12de98cf46640924ce6 Author: Gregor Zurowski <gregor@zurowski.org> Date:   2016-10-03T13:58:29Z       [maven-release-plugin]  prepare release camel-2.18.0  commit 54a02453f4611b47daea7f270623f2d4e974750d Author: Gregor Zurowski <gregor@zurowski.org> Date:   2016-10-03T13:59:42Z       [maven-release-plugin]  prepare for next development iteration  commit 244eb03876bb4e7d95b04b4f4ae48322e47e3bb4 Author: Franz Forsthofer <franz.forsthofer@sap.com> Date:   2016-10-04T11:59:42Z        CAMEL-10368  : Unused deflater in ZipDataFormat  commit da8694f8c5392881ac5ab49c37a7947451bb65af Author: Gregor Zurowski <gregor@zurowski.org> Date:   2016-10-04T22:28:22Z       [maven-release-plugin]  prepare release camel-2.18.0  commit e6d985d2f997b40711073e011849dc8498c225d7 Author: Gregor Zurowski <gregor@zurowski.org> Date:   2016-10-04T22:28:59Z       [maven-release-plugin]  prepare for next development iteration  commit 1df40f5f5097eca6c208cdef24be9a75dbcb2510 Author: Stephan Siano <stephan.siano@sap.com> Date:   2016-10-04T14:25:20Z        CAMEL-10370  : Conversion to CxfPayload throws Exception for Non-XML payload  commit ea4b27fbe1ff44d546c018c1436cab701a8705cf Author: Nicola Ferraro <ni.ferraro@gmail.com> Date:   2016-10-06T09:11:59Z        CAMEL-10358  : do not clear the registry too early  commit ef88e60af5dab348c779216b008c5dfe7730cc06 Author: Claus Ibsen <davsclaus@apache.org> Date:   2016-10-05T15:49:18Z        CAMEL-10366  : Include input/output/deprecated in the spring model json schema files so they are similar to EIP model files. Thanks to Aurelien Pupier for reporting this.  commit 63439e174e2fbc7b89994e5df3a3723b02c55c58 Author: Claus Ibsen <davsclaus@apache.org> Date:   2016-10-05T15:53:41Z      Fixed syntax on endpoint for component docs in camel-chronicele  commit f374df8d6704d2f121db92d0814531e2ad979205 Author: Claus Ibsen <davsclaus@apache.org> Date:   2016-10-05T16:11:32Z      Fixed camel-chronoicle component docs and schema  commit 17c3407fef17f29aeaef0f578e1fc6ca3427fa9c Author: Robert Gemmell <robbie@apache.org> Date:   2016-10-04T11:20:28Z        CAMEL-10367  : remove stale dependency and version prop, fix a couple typos  commit 3bc4cf5a6e146da6df5233a5ca8eb32f1e180a64 Author: Christian Mueller <cmueller@apache.org> Date:   2016-10-06T05:47:35Z      added the missing license and notice file to the camel-cm-sms component  commit f3eff6d82dcf670187ed7ddc4cb07e917b35dd41 Author: Christian Mueller <cmueller@apache.org> Date:   2016-10-06T05:54:38Z      added the missing license and notice file to the camel-servicenow component  commit 6081e236162a4d908b412080e608407361bc544c Author: Christian Mueller <cmueller@apache.org> Date:   2016-10-06T05:57:37Z      added the missing license and notice file to the camel-telegram component  commit 461d4dd69ce2591487df6db1d27416558ae53c83 Author: Claus Ibsen <davsclaus@apache.org> Date:   2016-10-07T13:40:30Z        CAMEL-10372  : Fixed camel-stream component doc  commit 20cf933edde90b48ee371cf89aaacb2833ad8a8b Author: Gregor Zurowski <gregor@zurowski.org> Date:   2016-10-09T20:15:46Z      Update schema files with release 2.18.0 references      Signed-off-by: Gregor Zurowski <gregor@zurowski.org>  commit ac002c88d28faec0b59d52a8b2427c23f1540a5a Author: Michael Lu00FCck <michael.lueck@hm-ag.de> Date:   2016-10-04T09:18:04Z      added method to check for key existence  commit 201aeb22f7a8eea16690028f2b0969a452ca6bec Author: Michael Lu00FCck <michael.lueck@hm-ag.de> Date:   2016-10-05T13:22:51Z      added null check before trying to call containsKey (prevent NPE)  commit 9916ee431192e1215a87900b5c5c622822d2e98c Author: Andrea Cosentino <ancosen@gmail.com> Date:   2016-10-11T07:54:45Z      Fixed CS  commit f655c94110ae14a3db5b2ce6409684deaa619846 Author: lburgazzoli <lburgazzoli@gmail.com> Date:   2016-09-29T17:25:18Z        CAMEL-10357  : camel-servicenow: add per release model  commit fa1789a36ea81cc03394e2e8806d8d4e8d2197a2 Author: lburgazzoli <lburgazzoli@gmail.com> Date:   2016-10-10T16:39:44Z        CAMEL-10378  : Upgrade log4j2 to v2.7  commit 37a12df6a3d6780495b249b959a25966b62afb69 Author: Jonathan Anstey <janstey@gmail.com> Date:   2016-10-11T19:09:15Z        CAMEL-10381   - fix NPE from component configuration  commit 7a1ee6bedc1c3572e7abdb0262f08d3435e5d293 Author: Jonathan Anstey <janstey@gmail.com> Date:   2016-10-11T21:55:12Z      remove non spring boot compatible starters  commit 645d024b442bb130eaebbff41a494ac313bc6868 Author: Jonathan Anstey <janstey@gmail.com> Date:   2016-10-11T22:17:27Z        CAMEL-10381   - fix NPE from component configuration  commit fbcaded8349754e574d6900dca863bbdec71b6c9 Author: Jonathan Anstey <janstey@gmail.com> Date:   2016-10-11T22:17:58Z      add missed test case  commit 6d663971259650b626303ca30e77004abcdd3b0a Author: Jonathan Anstey <janstey@gmail.com> Date:   2016-10-12T02:02:37Z        CAMEL-10381   - fix NPE from calendar component configuration  commit 8de429e1236f1f2fb24098a924eb651ede85adc8 Author: Jonathan Anstey <janstey@gmail.com> Date:   2016-10-12T02:06:18Z      fix test error  commit b15c2f5d62eb0285c5d48b9e9199e48abce365aa Author: Jonathan Anstey <janstey@gmail.com> Date:   2016-10-12T02:07:48Z      fix CS  commit 8965cad85337014340b2eb9a44db386d40669c30 Author: lburgazzoli <lburgazzoli@gmail.com> Date:   2016-10-11T15:42:34Z        CAMEL-10379  : Improved component description  commit 467ded8f388e85df728927d0b0c3f7fb87fb89d4 Author: James Netherton <jamesnetherton@gmail.com> Date:   2016-10-12T08:22:15Z      Minor improvements to camel-zipkin docs                 $_$      ASF GitHub Bot added a comment  - 22/Dec/16 12:20   Github user tomguenter closed the pull request at: https://github.com/apache/camel/pull/1364          ASF GitHub Bot added a comment  - 22/Dec/16 12:20                    Github user tomguenter closed the pull request at:       https://github.com/apache/camel/pull/1364                 $_$      Thomas Gu00FCnter added a comment  - 22/Dec/16 12:34   Correct pull request added manually due to invalid original pull request.          Thomas Gu00FCnter added a comment  - 22/Dec/16 12:34                    Correct pull request added manually due to invalid original pull request.                $_$      Andrea Cosentino added a comment  - 22/Dec/16 13:03   Thanks.          Andrea Cosentino added a comment  - 22/Dec/16 13:03                    Thanks.                $_$      ASF GitHub Bot added a comment  - 22/Dec/16 13:09   Github user tomguenter closed the pull request at: https://github.com/apache/camel/pull/1365          ASF GitHub Bot added a comment  - 22/Dec/16 13:09                    Github user tomguenter closed the pull request at:       https://github.com/apache/camel/pull/1365                 "
34,Java 9 - camel-restdsl-swagger-plugin fails integration test and camel-example-kotlin cannot compile,Task,Claus Ibsen,Claus Ibsen,"

See the CI output
https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/185/consoleText

",20/Apr/17 07:19,22/Apr/17 07:43,Resolved,Major,22/Apr/17 07:43,https://issues.apache.org/jira/browse/CAMEL-11172,"      Claus Ibsen added a comment  - 20/Apr/17 07:20   zregvart jpoth there is a few more Java 9 issues.The camel-example-kotlin can also not compile. Maybe we can skip this on java 9 (its deprecated anyway)          Claus Ibsen added a comment  - 20/Apr/17 07:20                     zregvart   jpoth  there is a few more Java 9 issues.  The camel-example-kotlin can also not compile. Maybe we can skip this on java 9 (its deprecated anyway)                $_$      Claus Ibsen added a comment  - 20/Apr/17 07:23   And there is some integration test failure in the new restdsl-swagger maven plugin.          Claus Ibsen added a comment  - 20/Apr/17 07:23                    And there is some integration test failure in the new restdsl-swagger maven plugin.                $_$      John Poth added a comment  - 20/Apr/17 07:57   Hi cibsen@e-ma.net, I have the Kotlin fix ready locally (skip tests) along with some other fixes which I plan to push soon. Looks like the latest Java build broke a few things too, currently investigating failures.          John Poth added a comment  - 20/Apr/17 07:57                    Hi  cibsen@e-ma.net , I have the Kotlin fix ready locally (skip tests) along with some other fixes which I plan to push soon. Looks like the latest Java build broke a few things too, currently investigating failures.                $_$      Claus Ibsen added a comment  - 21/Apr/17 08:14   I fixed the kotlin example.          Claus Ibsen added a comment  - 21/Apr/17 08:14                    I fixed the kotlin example.                $_$      John Poth added a comment  - 21/Apr/17 08:21   Great! I think I'll have my fixes ready by the EOD.          John Poth added a comment  - 21/Apr/17 08:21                    Great! I think I'll have my fixes ready by the EOD.                $_$      Claus Ibsen added a comment  - 22/Apr/17 07:43   We have Johns fixes now          Claus Ibsen added a comment  - 22/Apr/17 07:43                    We have Johns fixes now                "
35,Type converters for enums should support case insensitve,Improvement,Claus Ibsen,Claus Ibsen,"

for example then people can configure the enums more safely without the hazzle of case,
exchangePattern=inout
output=dom
Where the enum is named DOM etc

",12/Nov/14 07:19,12/Nov/14 08:54,Resolved,Major,12/Nov/14 08:54,https://issues.apache.org/jira/browse/CAMEL-8037,
36,ProducerTemplate asyncSend is not thread safe,Bug,Claus Ibsen,Zoltán Nébli,"

The


CompletableFuture<Exchange> asyncSend(String endpointUri, Processor processor)

method is not thread safe because the processor is passed as a lambda to the executor service:


getExecutorService().submit(() -> getProducerCache().asyncSendExchange(endpoint, pattern, processor,
 resultProcessor, inExchange, exchangeFuture));

and therefore if the caller use the original Exchange reference in the Processor, for example


request -> request.setBody(originalExchange.getIn().getBody(...))

the executorService thread will use a dirty Exchange body in cases where the original executor thread runs faster.
On the other hand this method is thread safe because the new Exchange object can be populated from the original exchange:


CompletableFuture<Exchange> asyncSend(String endpointUri, Exchange exchange)

I think the solution would be processing the request with the passed processor then submit the job to the executor service or clearly mention this in the API doc. This behavior is currently not straightforward.
Of course you can pass references with the 2. method also which will become dirty but I think the clear intention here is sending a clean Exchange asynchronously to an endpoint with either a Processor or an exact Exchange object.

",08/Mar/21 13:10,23/Mar/21 06:20,Resolved,Minor,23/Mar/21 06:20,https://issues.apache.org/jira/browse/CAMEL-16316,"      Claus Ibsen added a comment  - 08/Mar/21 13:58   Camel 3.1 is rather old, try with 3.7.3          Claus Ibsen added a comment  - 08/Mar/21 13:58                    Camel 3.1 is rather old, try with 3.7.3                $_$      Zoltu00E1n Nu00E9bli added a comment  - 08/Mar/21 18:01   there is no 3.7.3 version on maven central but there is 3.7.2 and the implementation is very similar of the asyncSendExchange method:rCompletableFuture<Exchange> exchangeFuture = new CompletableFuture();rthis.getExecutorService().submit(() -> {r return this.getProducerCache().asyncSendExchange(endpoint, pattern, processor, resultProcessor, inExchange, exchangeFuture);r});rreturn exchangeFuture;the processor lambda is not evaluated until a thread from the executor threadpool starts work on it.          Zoltu00E1n Nu00E9bli added a comment  - 08/Mar/21 18:01                    there is no 3.7.3 version on maven central but there is 3.7.2 and the implementation is very similar of the  asyncSendExchange  method:    rCompletableFuture<Exchange> exchangeFuture =  new  CompletableFuture();r this .getExecutorService().submit(() -> {r  return   this .getProducerCache().asyncSendExchange(endpoint, pattern, processor, resultProcessor, inExchange, exchangeFuture);r});r return  exchangeFuture;    the processor lambda is not evaluated until a thread from the executor threadpool starts work on it.                $_$      Claus Ibsen added a comment  - 23/Mar/21 06:20   Added note to javadoc about the thread-safety issue          Claus Ibsen added a comment  - 23/Mar/21 06:20                    Added note to javadoc about the thread-safety issue                "
37,Apache Camel Yammer component does not work in 3.x (from 3.1),Bug,Unassigned,Zoltán Lutor,"

It seems there was some change in Camel 3.1 that broke Yammer: replacing explicit ‘function’ string value with name of ‘featureType’ enum makes Yammer API URLs invalid: e.g. https://www.yammer.com/api/v1/messages.json vs https://www.yammer.com/api/v1/*MESSAGES*.json
 
Details:

line #28 and line #96 in https://github.com/apache/camel/blame/camel-3.1.x/components/camel-yammer/src/main/java/org/apache/camel/component/yammer/YammerConfiguration.java
line #44 in https://github.com/apache/camel/blob/camel-3.1.x/components/camel-yammer/src/main/java/org/apache/camel/component/yammer/YammerMessageProducer.java
and other places where use of ‘function’ was replaced with name of “functionType” enum values...


",02/Nov/20 09:42,02/Nov/20 10:24,Resolved,Major,02/Nov/20 10:22,https://issues.apache.org/jira/browse/CAMEL-15788,      Claus Ibsen added a comment  - 02/Nov/20 10:24   Thanks for reporting and pointing out where in the code the problems are.          Claus Ibsen added a comment  - 02/Nov/20 10:24                    Thanks for reporting and pointing out where in the code the problems are.                
38,camel-jetty - Problem with latest Spring Boot 1.5.8,Bug,Claus Ibsen,Claus Ibsen,"

See user forum
http://camel.465427.n5.nabble.com/camel-jetty-and-jetty-version-9-4-7-v20170914-td5814774.html
Also it causes camel-ribbon-starter tests to fail

",03/Nov/17 09:37,03/Nov/17 09:38,Resolved,Major,03/Nov/17 09:38,https://issues.apache.org/jira/browse/CAMEL-11988,
39,camel-bindy - Null as default value for string,Improvement,Unassigned,michael elbaz,"

From 2.18.0 the default value for empty string is """" and it is not possible to set default string value to null please provide a way to do that, maybe the good solution is to set the default value to null when empty and provide the ability to change this with the annotion parameter 'defaultValue' (related subject)

",15/Nov/18 20:03,02/Sep/22 11:19,Open,Minor,open,https://issues.apache.org/jira/browse/CAMEL-12941,"      Claus Ibsen added a comment  - 06/Aug/19 15:12   Whats the use-case for using null as default value?          Claus Ibsen added a comment  - 06/Aug/19 15:12                    Whats the use-case for using null as default value?                $_$      michael elbaz added a comment  - 06/Aug/19 15:14   davsclaus Some json manipulation          michael elbaz added a comment  - 06/Aug/19 15:14                     davsclaus  Some json manipulation                $_$      Mikael Andersson Wigander added a comment  - 30/Mar/22 10:10   I also second that and my reason is also when later marshalling from POJO to json the Jackson Library will include this as a key with an empty string as value. In comparison to primitives which gets a null value (by definition) if no value.If a default value is needed, then use defaultValue = """".In my case I have to define a default value (not """"), create a custom converter for all String fields, which then removes the default string and sets the field to null.r    public static Object getDefaultValueForPrimitive(Class<?> clazz) {r        if (clazz == byte.class) {r            return Byte.MIN_VALUE;r        } else if (clazz == short.class) {r            return Short.MIN_VALUE;r        } else if (clazz == int.class) {r            return Integer.MIN_VALUE;r        } else if (clazz == long.class) {r            return Long.MIN_VALUE;r        } else if (clazz == float.class) {r            return Float.MIN_VALUE;r        } else if (clazz == double.class) {r            return Double.MIN_VALUE;r        } else if (clazz == char.class) {r            return Character.MIN_VALUE;r        } else if (clazz == boolean.class) {r            return false;r        } else if (clazz == String.class) {r            return """";r        } else {r            return null;r        }rr    }rUsing 3.14.1u2026          Mikael Andersson Wigander added a comment  - 30/Mar/22 10:10                    I also second that and my reason is also when later marshalling from POJO to json the Jackson Library will include this as a key with an empty string as value. In comparison to primitives which gets a null value (by definition) if no value.  If a default value is needed, then use defaultValue = """".  In my case I have to define a default value (not """"), create a custom converter for all String fields, which then removes the default string and sets the field to null.    r     public   static   Object  getDefaultValueForPrimitive( Class <?> clazz) {r         if  (clazz ==  byte .class) {r             return   Byte .MIN_VALUE;r        }  else   if  (clazz ==  short .class) {r             return   Short .MIN_VALUE;r        }  else   if  (clazz ==  int .class) {r             return   Integer .MIN_VALUE;r        }  else   if  (clazz ==  long .class) {r             return   Long .MIN_VALUE;r        }  else   if  (clazz ==  float .class) {r             return   Float .MIN_VALUE;r        }  else   if  (clazz ==  double .class) {r             return   Double .MIN_VALUE;r        }  else   if  (clazz ==  char .class) {r             return   Character .MIN_VALUE;r        }  else   if  (clazz ==  boolean .class) {r             return   false ;r        }  else   if  (clazz ==  String .class) {r             return  """";r        }  else  {r             return   null ;r        }rr    }r    Using 3.14.1u2026                "
40,camel ahc uses netty 4.0.41 transitively but 4.1.5 explicitly - leads to runtime exceptions,Bug,Andrea Cosentino,Justin Heesemann,"

See here (not created by myself, but I experienced the same issue with camel-ahc) http://stackoverflow.com/questions/40262870/camel-ahc-ws-netty-runtime-exception/40528271#40528271
I see errors like:

java.lang.NoSuchMethodError: io.netty.buffer.ByteBuf.forEachByte(Lio/netty/buffer/ByteBufProcessor;)


When I'm sending http requests via camel-ahc.
A workaround for me is to exclude netty-all 4.1.5 and use netty-all 4.0.41.Final instead
Since there is no version of AsyncHttpClient out there which directly support 4.1.5 I'm not sure how to handle this if you need both camel-ahc and camel-netty (or whatever else is making direct use of netty 4.1.5)

",10/Nov/16 13:12,11/Nov/16 12:50,Resolved,Major,11/Nov/16 12:02,https://issues.apache.org/jira/browse/CAMEL-10465,"      Andrea Cosentino added a comment  - 10/Nov/16 13:18   I will take a look. Probably when we upgrade all the components to Netty 4.1.x we didn't notice this. Thanks for spotting this.          Andrea Cosentino added a comment  - 10/Nov/16 13:18                    I will take a look. Probably when we upgrade all the components to Netty 4.1.x we didn't notice this. Thanks for spotting this.                $_$      Claus Ibsen added a comment  - 11/Nov/16 08:41   Yeah so ahc should then use netty 4.0.x          Claus Ibsen added a comment  - 11/Nov/16 08:41                    Yeah so ahc should then use netty 4.0.x                $_$      Justin Heesemann added a comment  - 11/Nov/16 12:40   I just want to say thanks.To me, apache camel is one of the best maintained open source projects I have encountered and could well serve as an example to many commercially maintained products.Response times within hours, fixes within hours or few days.. again. thanks, and have a nice weekend.          Justin Heesemann added a comment  - 11/Nov/16 12:40                    I just want to say thanks. To me, apache camel is one of the best maintained open source projects I have encountered and could well serve as an example to many commercially maintained products. Response times within hours, fixes within hours or few days.. again. thanks, and have a nice weekend.                $_$      Andrea Cosentino added a comment  - 11/Nov/16 12:50   convoi, thanks a lot. This is something that make us proud Many thanks for your kind words!          Andrea Cosentino added a comment  - 11/Nov/16 12:50                     convoi , thanks a lot. This is something that make us proud    Many thanks for your kind words!                "
41,Provide a way to use async engine from ProducerTemplate,New Feature,Claus Ibsen,Vitalii Tymchyshyn,"

Currently ProducerTemplate delegates to Sync engine even when async* methods are used.
This improvement:

changes async methods to use async engine
Provides Java 8 CompletableFuture  instead of regular Future to the called
Provides a way to invoke async engine without additional thread pool


",11/Sep/16 23:24,18/Sep/16 08:19,Resolved,Major,18/Sep/16 08:19,https://issues.apache.org/jira/browse/CAMEL-10308,"      ASF GitHub Bot added a comment  - 11/Sep/16 23:27   GitHub user tivv opened a pull request: https://github.com/apache/camel/pull/1167 CAMEL-10308    Provide a way to use async engine from ProducerTemplateYou can merge this pull request into a Git repository by running:    $ git pull https://github.com/tivv/camel j8-producer-templateAlternatively you can review and apply these changes as the patch at: https://github.com/apache/camel/pull/1167.patchTo close this pull request, make a commit to your master/trunk branchwith (at least) the following in the commit message:    This closes #1167commit 5daf4fa79a8cfa74e0d3253d07e8548c844de3a9Author: Vitalii Tymchyshyn <vit@tym.im>Date:   2016-09-11T23:25:42Z CAMEL-10308    Provide a way to use async engine from ProducerTemplate          ASF GitHub Bot added a comment  - 11/Sep/16 23:27                    GitHub user tivv opened a pull request:       https://github.com/apache/camel/pull/1167         CAMEL-10308        Provide a way to use async engine from ProducerTemplate  You can merge this pull request into a Git repository by running:      $ git pull  https://github.com/tivv/camel  j8-producer-template  Alternatively you can review and apply these changes as the patch at:       https://github.com/apache/camel/pull/1167.patch   To close this pull request, make a commit to your master/trunk branch with (at least) the following in the commit message:      This closes #1167   commit 5daf4fa79a8cfa74e0d3253d07e8548c844de3a9 Author: Vitalii Tymchyshyn <vit@tym.im> Date:   2016-09-11T23:25:42Z        CAMEL-10308       Provide a way to use async engine from ProducerTemplate                 $_$      ASF GitHub Bot added a comment  - 17/Sep/16 13:46   Github user tivv closed the pull request at: https://github.com/apache/camel/pull/1167          ASF GitHub Bot added a comment  - 17/Sep/16 13:46                    Github user tivv closed the pull request at:       https://github.com/apache/camel/pull/1167                 $_$      Claus Ibsen added a comment  - 18/Sep/16 08:19   Thanks for the PR          Claus Ibsen added a comment  - 18/Sep/16 08:19                    Thanks for the PR                "
42,The camel core 2.0.0 artifact release doesn't contain the @MessageDriven annotation,Bug,Unassigned,Kevin McKee,"

The artifact coming from the maven central repo doesn't contain the @org.apache.camel.MessageDriven annotation.
This annotation is still in the javadoc, so I assume it hasn't been removed?
<dependency>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-core</artifactId>
	<version>2.0.0</version>
	<scope>provided</scope>
</dependency>

",29/Sep/09 01:29,29/Sep/09 01:33,Closed,Critical,open,https://issues.apache.org/jira/browse/CAMEL-2045,"      Kevin McKee added a comment  - 29/Sep/09 01:33   By searching around on google, I just found that @Consume should be used in it's place.          Kevin McKee added a comment  - 29/Sep/09 01:33                    By searching around on google, I just found that @Consume should be used in it's place.                "
43,"neater DSL syntax to better support polling of resources (e.g. files, HTTP etc) ",Improvement,Unassigned,James Strachan,"

see the discussion here : http://www.nabble.com/extract-xml-from-URL-and-save-to-file-tp16232121s22882p16308137.html

",27/Mar/08 12:32,07/Feb/10 09:54,Closed,Major,open,https://issues.apache.org/jira/browse/CAMEL-402,      Claus Ibsen added a comment  - 13/Sep/09 18:35   We actually already have it in 2.0 with the enrich and pollEnrich DSL          Claus Ibsen added a comment  - 13/Sep/09 18:35                    We actually already have it in 2.0 with the enrich and pollEnrich DSL                
44,camel-core - XPathBuilder never clears pool when using @XPath annotation and grows pool causing memory leak,Bug,Claus Ibsen,Mikael Andersson Wigander,"

When using @XPath() annotations to bean method parameters, XPathBuilder is used and expressions are added to a pool in the init() method of the class.
These expressions are keep adding up but they are never cleared.
There's a method doStop() which has the code for cleaning but it is never used, hence a leakage of XPathExpressions.
 

",09/Nov/21 10:50,26/Nov/21 07:52,Resolved,Major,12/Nov/21 09:16,https://issues.apache.org/jira/browse/CAMEL-17181,"      Mikael Andersson Wigander added a comment  - 09/Nov/21 13:04   Adding a snippet with a file to useFULINS_I_20211106_01of01.zipRoute:r    from(file(""<some-dir>""))r                .streamCaching()r                .unmarshal()r                .zipFile()r                .split()r                .tokenizeXML(""RefData"")r                .streaming()r                .parallelProcessing(true)r                .bean(XmlToSqlBean.class)r                .end();rrBean:r  public  class XmlToSqlBean {r        public String toSql(@XPath(""//FinInstrmGnlAttrbts/Id"") final String isin,r                            @XPath(""//NtnlCcy"") final String currency,r                            @XPath(""//FullNm"") final String fullName,r                            @XPath(""//TradgVnRltdAttrbts/Id"") final String venue,r                            @XPath(""//ClssfctnTp"") final String classification,r                            @XPath(""//TradgVnRltdAttrbts/TermntnDt"") final String terminationDate,r                            @XPath(""//Issr"") final String issuer,r                            @XPath(""//MtrtyDt"") String maturityDate,r                            @XPath(""//TermntdRcrd"") final String termnRecord,r                            @XPath(""//NewRcrd"") final String newRecord) {rr            return null;r        }r    }rr          Mikael Andersson Wigander added a comment  - 09/Nov/21 13:04                    Adding a snippet with a file to use    FULINS_I_20211106_01of01.zip       Route:    r    from(file( ""<some-dir>"" ))r                .streamCaching()r                .unmarshal()r                .zipFile()r                .split()r                .tokenizeXML( ""RefData"" )r                .streaming()r                .parallelProcessing( true )r                .bean(XmlToSqlBean.class)r                .end();rr    Bean:    r   public    class  XmlToSqlBean {r         public   String  toSql(@XPath( "" //FinInstrmGnlAttrbts/Id"" )  final   String  isin,r                             @XPath( "" //NtnlCcy"" )  final   String  currency,r                             @XPath( "" //FullNm"" )  final   String  fullName,r                             @XPath( "" //TradgVnRltdAttrbts/Id"" )  final   String  venue,r                             @XPath( "" //ClssfctnTp"" )  final   String  classification,r                             @XPath( "" //TradgVnRltdAttrbts/TermntnDt"" )  final   String  terminationDate,r                             @XPath( "" //Issr"" )  final   String  issuer,r                             @XPath( "" //MtrtyDt"" )  String  maturityDate,r                             @XPath( "" //TermntdRcrd"" )  final   String  termnRecord,r                             @XPath( "" //NewRcrd"" )  final   String  newRecord) {r r             return   null ;r        }r    }rr                  $_$      Claus Ibsen added a comment  - 12/Nov/21 09:01   Okay I found the problem is due to pre compile is enabled and that it adds to the pool even if the pool already has an element - this is due to how @XPath annotations works differently than when you use it in the route DSL          Claus Ibsen added a comment  - 12/Nov/21 09:01                    Okay I found the problem is due to pre compile is enabled and that it adds to the pool even if the pool already has an element - this is due to how @XPath annotations works differently than when you use it in the route DSL                $_$      Mikael Andersson Wigander added a comment  - 12/Nov/21 09:53   Tried to override the preCompile using configuration property but it doesn't stick          Mikael Andersson Wigander added a comment  - 12/Nov/21 09:53                    Tried to override the preCompile using configuration property but it doesn't stick                $_$      Claus Ibsen added a comment  - 12/Nov/21 10:35   Yeah @XPath annotation does not support this configuration, you need to patch your system yourself or wait for release with fix.          Claus Ibsen added a comment  - 12/Nov/21 10:35                    Yeah @XPath annotation does not support this configuration, you need to patch your system yourself or wait for release with fix.                $_$      Mikael Andersson Wigander added a comment  - 26/Nov/21 07:52   Just for my curiousity, the doStop() method in XPathBuilder.class is never executed it seems.u00A0In that method the Queues pool and poolLogNamespaces are clearr@Overrider    public void doStop() throws Exception {r        pool.clear();r        poolLogNamespaces.clear();r    }rShouldn't it be called from somewhere in Camel?          Mikael Andersson Wigander added a comment  - 26/Nov/21 07:52                    Just for my curiousity, the doStop() method in XPathBuilder.class is never executed it seems.u00A0  In that method the Queues pool and poolLogNamespaces are clear    r@Overrider     public  void doStop()  throws  Exception {r        pool.clear();r        poolLogNamespaces.clear();r    }r    Shouldn't it be called from somewhere in Camel?                "
45,Camel-AWS-SQS: Add an operation to list existing queues,New Feature,Andrea Cosentino,Andrea Cosentino,,23/May/19 10:02,30/Sep/21 10:34,Resolved,Major,23/May/19 10:07,https://issues.apache.org/jira/browse/CAMEL-13562,
46,Camel Commands for the Karaf shell should work with Karaf 3,Improvement,Christian Schneider,Christian Schneider,"

Currently camel-core can not be installed  into Karaf 3. The error message is that the shell.console package it imports is in version 3.0.0 in karaf 3.
Our import range is [2.2-3) though. So we should change the import to [2.2-4).
Currently this does not work with Karaf 3 but I will make sure Karaf 3 will be compatible to the current camel commands.
It is important to do the import range change now so camel 2.10.0 is later compatible.

",08/May/12 20:28,09/May/12 08:37,Resolved,Major,09/May/12 07:57,https://issues.apache.org/jira/browse/CAMEL-5254,      Christian Schneider added a comment  - 08/May/12 20:29   Linking to the related issue in karaf          Christian Schneider added a comment  - 08/May/12 20:29                    Linking to the related issue in karaf                $_$      Christian Schneider added a comment  - 09/May/12 07:57   Import range increased. This will only actually work as soon as the linked karaf issue is resolved          Christian Schneider added a comment  - 09/May/12 07:57                    Import range increased. This will only actually work as soon as the linked karaf issue is resolved                
47,Add enrich() processor to implement Content Enricher pattern,New Feature,Jonathan Anstey,Fintan Bolton,"

Add an enrich() processor with the following overloaded variants:
	from(<SourceURI>).enrich(<EnricherURI>)...
	from(<SourceURI>).enrich(<EnricherURI>, <Aggregator>)...
	from(<SourceURI>).enrich(<EnricherURI>, <Aggregator>, <CachingFlag>)...
Motivation:
-----------
The motivation for this feature comes from a problem that Mark Fynes encountered while trying to integrate an Artix Data Services example with Camel. The Artix DS example had multiple inputs, but it turns out that it is difficult to represent an Artix DS transform with multiple inputs in Camel.
After thinking about it for a bit, I realized that the problem can be solved using the Content Enricher EIP pattern. Currently, however, writing a Camel content enricher mostly involves rolling your own code. The aim of the 'Content Enricher Pattern' is to generalize the solution of Mark's problem so that you can create a content enricher quickly and easily in the future.
Use Case 1 - Enriching from a flat file:
----------------------------------------
In the original example that Mark worked on, there were two sources of input:
1. A stream of credit card transactions (e.g. containing a Name, Credit Card Number, TransactionAmount, and so on). This input can be represented by the start of a Camel route, e.g. from(<SourceURI>).
2. An XML file containing credit ratings for different customers (e.g. a list of associations between Names and credit ratings). This input represents the data that will be fed in through the content enricher processor.
The two sources of input could be handled by a new 'enrich()' processor, which is specified as follows:
	from(<SourceURI>).enrich(<EnricherURI>, <Aggregator>, <CachingFlag>)...
Where the <SourceURI> specifies the source of incoming credit card transactions (e.g. from a message queue), <EnricherURI> specifies the flat file containing the credit ratings, <Aggregator> is a Camel aggregator, and <CachingFlag> indicates whether the flat file (from <EnricherURI>) should be read only once (true) or every time a transaction comes in (false).
For the <Aggregator>, probably the most generally useful implementation would be a ListAggregator that combines the incoming exchange and the enricher exchange into a java.util.List instance. The value list.get(0) would return the exchange from <SourceURI> and list.get(1) would return the exchange from the <EnricherURI>.
If you chain enrichers as follows:
	from(<SourceURI>)
		.enrich(<EnricherURI01>, listAggregator)
		.enrich(<EnricherURI02>, listAggregator)
		...
You would obtain a list with list.get(0) from <SourceURI>, list.get(1) from <EnricherURI01>, and list.get(2) from <EnricherURI02>.
If you consider ListAggregator to be a good default, you could define the following overloaded variants of enrich:
	enrich(<EnricherURI>)
	enrich(<EnricherURI>, <Aggregator>)
	enrich(<EnricherURI>, <Aggregator>, <CachingFlag>)
Where the default value of <CachingFlag> probably ought to be true.
Demo
-------
The attached ZIP file contains a partial demo of this functionality. To run the demo, unzip the archive and run the command, 'mvn test'.

",20/Nov/08 11:27,24/Oct/09 11:16,Closed,Major,open,https://issues.apache.org/jira/browse/CAMEL-1106,"      Jonathan Anstey added a comment  - 20/Nov/08 12:41   Neat demo Fintan!I can take a look at adding this for you. May not be till next week though           Jonathan Anstey added a comment  - 20/Nov/08 12:41                    Neat demo Fintan!  I can take a look at adding this for you. May not be till next week though                  $_$      Jonathan Anstey added a comment  - 20/Nov/08 12:42   Just noticed that you've attached the demo without granting an ASF license. Would you mind re-attaching it with the license?          Jonathan Anstey added a comment  - 20/Nov/08 12:42                    Just noticed that you've attached the demo without granting an ASF license. Would you mind re-attaching it with the license?                $_$      Gert Vanthienen added a comment  - 20/Nov/08 12:43   Fintan,Instead of adding the CachingFlag specifically for the content-enricher, wouldn't it be better to make this into a generic service that can be plugged into any route?It can be useful to have support for caching webservice requests etc. as well.Something like...from(<SourceURI>).enrich(""direct:enricher"", <Aggregator>);from(""direct:enricher"").cache(<CacheOptions>).to(<EnricherURI>);Gert          Gert Vanthienen added a comment  - 20/Nov/08 12:43                    Fintan,  Instead of adding the CachingFlag specifically for the content-enricher, wouldn't it be better to make this into a generic service that can be plugged into any route? It can be useful to have support for caching webservice requests etc. as well.  Something like...    from(<SourceURI>).enrich( ""direct:enricher"" , <Aggregator>);from( ""direct:enricher"" ).cache(<CacheOptions>).to(<EnricherURI>);    Gert                $_$      Jonathan Anstey added a comment  - 20/Nov/08 12:50   I should probably also say if any other camel devs want to take a crack at this before I do, you are welcome. I don't mean to be a JIRA hog            Jonathan Anstey added a comment  - 20/Nov/08 12:50                    I should probably also say if any other camel devs want to take a crack at this before I do, you are welcome. I don't mean to be a JIRA hog                   $_$      Fintan Bolton added a comment  - 20/Nov/08 16:35   Updated the demo to include the Apache license in all the source code files.          Fintan Bolton added a comment  - 20/Nov/08 16:35                    Updated the demo to include the Apache license in all the source code files.                $_$      Jonathan Anstey added a comment  - 20/Nov/08 16:36   Thanks Fintan.          Jonathan Anstey added a comment  - 20/Nov/08 16:36                    Thanks Fintan.                $_$      Fintan Bolton added a comment  - 20/Nov/08 16:45   Gert,We are probably talking at cross-purposes here. The first argument of enrich() is intended to be a consumer endpoint. So, the example route you gave does not seem to be consistent with that assumption.But I would be grateful, if you have any ideas on how to improve the caching. The caching in the current demo is fairly simplistic.Cheers,Fintan          Fintan Bolton added a comment  - 20/Nov/08 16:45                    Gert,  We are probably talking at cross-purposes here. The first argument of enrich() is intended to be a  consumer  endpoint. So, the example route you gave does not seem to be consistent with that assumption.  But I would be grateful, if you have any ideas on how to improve the caching. The caching in the current demo is fairly simplistic.  Cheers, Fintan                $_$      Jonathan Anstey added a comment  - 11/Feb/09 20:11   This feature has been added in CAMEL-209 so I'm closing this one.            Jonathan Anstey added a comment  - 11/Feb/09 20:11                    This feature has been added in   CAMEL-209   so I'm closing this one.                  "
48,camel cdi uses postconstruct to inject in cdi beans,Bug,Claus Ibsen,Romain Manni-Bucau,"

org.apache.camel.cdi.internal.CamelExtension#onInjectionTarget uses InjectionTarget#postConstruct instead of inject() to inject camel injections. That's not really consistent since postconstruct is done once injections are done because they can be used in post construct methods.

",06/May/13 15:56,20/Nov/15 18:08,Resolved,Minor,10/Jul/15 10:01,https://issues.apache.org/jira/browse/CAMEL-6336,      Claus Ibsen added a comment  - 02/Mar/14 11:31   Patches is welcome          Claus Ibsen added a comment  - 02/Mar/14 11:31                    Patches is welcome                $_$      Claus Ibsen added a comment  - 10/Jul/15 10:01   Thanks for the suggestion          Claus Ibsen added a comment  - 10/Jul/15 10:01                    Thanks for the suggestion                
49,REST model filenames in camel-catalog,Improvement,Claus Ibsen,Marat Gubaidullin,"

Could we align models json filenames in camel-catalog for REST DSL same way as EIP DSL?
ex. in EIP we have


definition name without word 'Definition'


WireTapDefinition -> wireTap.json
ChoiceDefinition -> choice.json
RestDefinition -> rest.json
however for REST DSL we have


definition name without word 'VerbDefinition'


PostVerbDefinition -> post.json
GetVerbDefinition -> get.json
HeadVerbDefinition -> head.json
DeleteVerbDefinition -> delete.json
PatchVerbDefinition -> patch.json

",17/Feb/22 01:21,17/Feb/22 14:08,Resolved,Major,17/Feb/22 14:08,https://issues.apache.org/jira/browse/CAMEL-17664,
